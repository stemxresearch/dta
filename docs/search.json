[{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"sample-datasets-and-dictionaries","dir":"Articles","previous_headings":"","what":"Sample datasets and dictionaries","title":"Efficient Data Management and Manipulation","text":"package includes several sample datasets dictionaries. descriptions examples load .","code":""},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"datasets","dir":"Articles","previous_headings":"Sample datasets and dictionaries","what":"Datasets","title":"Efficient Data Management and Manipulation","text":"data_bmi: Sample data body mass index (BMI) calculations. data_cancer: Sample data: Survival cancer patients days. data_misspelled: Sample dataset general information.","code":"data(\"data_bmi\") dta_gtable(data_bmi) #> Error in get(paste0(generic, \".\", class), envir = get_method_env()) :  #>   object 'type_sum.accel' not found data(\"data_cancer\") dta_gtable(data_cancer) data(\"data_misspelled\") dta_gtable(data_misspelled)"},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"dictionaries","dir":"Articles","previous_headings":"Sample datasets and dictionaries","what":"Dictionaries","title":"Efficient Data Management and Manipulation","text":"Dictionaries data values applied update, modify, standardize values specified dataset, enabling consistent efficient data transformation. dict_recode: dictionary variable value mappings labels ordered status. dict_misspelled: dictionary variable value mappings labels ordered status.","code":"data(\"dict_recode\") dta_gtable(dict_recode) data(\"dict_misspelled\") dta_gtable(dict_misspelled)"},{"path":[]},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"data-management-and-transformation-functions","dir":"Articles","previous_headings":"Functions","what":"Data management and transformation functions","title":"Efficient Data Management and Manipulation","text":"dta_columns() Retrieve column names data frame. dta_duplicates() Find duplicate rows based specific columns. dta_label() Assign variable labels data frame tibble columns. dta_recode() Recode variables data frame based dictionary. dta_replace() Correct misspelled data using dictionary. dta_transpose() Transpose data frame specified column variable names","code":"data(mtcars) dta_columns(mtcars, .columns = starts_with(\"c\")) #> [1] \"cyl\"  \"carb\" dta_columns(mtcars, .columns = cyl:wt) #> [1] \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\" dta_columns(mtcars, .columns = c(mpg, hp, vs, gear)) #> [1] \"mpg\"  \"hp\"   \"vs\"   \"gear\" df <- data.frame(   id = c(14, 20, 12, 32, 14, 23, 15, 12, 30, 14),   name = c(    \"Mary\", \"Mark\", \"Faith\", \"David\", \"Mary\", \"Daniel\", \"Christine\",    \"Johnson\", \"Elizabeth\", \"Mary\"   ),   age = c(21, 18, 25, 17, 21, 24, 21, 19, 20, 21) )  result <- dta_duplicates(df) dta_gtable(result) result2 <- dta_duplicates(df, .columns = id) dta_gtable(result2) dat <- data.frame(   age = c(25, 30, 35, 40),   gender = c(\"Male\", \"Female\", \"Female\", \"Male\"),   income = c(50000, 60000, 55000, 65000) )  names <- c(\"age\", \"income\") labels <- c(\"Age in years\", \"Annual income\")  result <- dta_label(   dat, dict = NULL, .names = names, .labels = labels )  dta_gtable(result) library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data(\"data_sample\") glimpse(data_sample) # look at the data type column #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <chr> \"Central\", \"Central\", \"South\", \"West\", \"North East\", \"N… #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <chr> \"50-59\", \"40-49\", \"40-49\", \"30-39\", \"40-49\", \"50-59\", \"… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <chr> \"AB\", \"B\", \"AB\", \"AB\", \"A\", \"A\", \"AB\", \"B\", \"A\", \"AB\", … #> $ marital_status <chr> \"Married\", \"Married\", \"Married\", \"Single\", \"Single\", \"M… #> $ education      <chr> \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Ba… #> $ employed       <chr> \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ ses            <chr> \"Middle\", \"Middle\", \"High\", \"Middle\", \"Low\", \"Middle\", … #> $ language       <chr> \"Mandarin\", \"French\", \"Arabic\", \"English\", \"Arabic\", \"M… #> $ phone          <chr> \"OnePlus\", \"OnePlus\", \"Samsung\", \"OnePlus\", \"OnePlus\", … #> $ transport      <chr> \"Bicycle\", \"Train\", \"Car\", \"Bus\", \"Bus\", \"Bus\", \"Bus\", … #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes… #> $ python         <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"N… #> $ sas            <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", … #> $ stata          <chr> \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ spss           <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\"… #> $ excel          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", … data(\"dict_recode\") dta_gtable(dict_recode) result <- dta_recode(   dat = data_sample,   dict = dict_recode,   is_force_sequential = TRUE ) glimpse(result) #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <fct> Central, Central, South, West, North East, North East, … #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <ord> 50-59, 40-49, 40-49, 30-39, 40-49, 50-59, 50-59, 30-39,… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <fct> AB, B, AB, AB, A, A, AB, B, A, AB, AB, A, B, AB, A, B, … #> $ marital_status <fct> Married, Married, Married, Single, Single, Married, Sin… #> $ education      <ord> Bachelors, Bachelors, Bachelors, Bachelors, Bachelors, … #> $ employed       <fct> Yes, No, No, Yes, Yes, No, Yes, No, Yes, Yes, Yes, No, … #> $ ses            <ord> Middle, Middle, High, Middle, Low, Middle, Low, Low, Mi… #> $ language       <fct> Mandarin, French, Arabic, English, Arabic, Mandarin, En… #> $ phone          <fct> OnePlus, OnePlus, Samsung, OnePlus, OnePlus, Samsung, O… #> $ transport      <fct> Bicycle, Train, Car, Bus, Bus, Bus, Bus, Train, Bicycle… #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <fct> No, No, No, No, No, Yes, Yes, Yes, Yes, Yes, Yes, No, N… #> $ python         <fct> No, Yes, Yes, Yes, No, Yes, Yes, No, No, No, Yes, Yes, … #> $ sas            <fct> No, No, No, No, No, No, No, No, Yes, No, No, No, No, No… #> $ stata          <fct> No, No, Yes, Yes, Yes, No, Yes, No, Yes, No, Yes, Yes, … #> $ spss           <fct> No, No, Yes, No, Yes, No, No, Yes, No, Yes, No, Yes, No… #> $ excel          <fct> Yes, No, No, No, No, No, No, No, No, No, No, No, Yes, N… data(\"data_misspelled\") dta_gtable(head(data_misspelled)) data(\"dict_misspelled\") dta_gtable(dict_misspelled) # Correct the misspelled entries in `dat` using the # `dict` dictionary  result <- dta_replace(   dat = data_misspelled,    dict = dict_misspelled,    .name = variable,    .wrong = old,    .correct = new ) dta_gtable(head(result)) data(\"data_cancer\") dta_gtable(data_cancer) df <- dta_transpose(   dat = data_cancer, .column_to_use_as_variables = cancer_type ) dta_gtable(df)"},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"compute-and-generate-functions","dir":"Articles","previous_headings":"Functions","what":"Compute and generate functions","title":"Efficient Data Management and Manipulation","text":"dta_bmi() Calculate body mass index (BMI). dta_bmicat() Categorize BMI weight categories. dta_mrq() Split multiple response question column binary columns.","code":"data(\"data_bmi\") dta_gtable(data_bmi) df <- dta_bmi(   dat = data_bmi,   .weight = weight,   .height = height,   name = body_mass_index,   digits = 2 ) dta_gtable(df) data(\"data_bmicat\") dta_gtable(data_bmicat) # Categorize `bmi` into the standard BMI categories  df <- dta_bmicat(   dat = data_bmicat,   .bmi = bmi,   name = bmi_cat,   is_extended = FALSE,   as_factor = TRUE ) dta_gtable(df) data(\"data_gadgets\") dat <- data_gadgets dta_gtable(dat) # Split `gadgets_owned` column into separate columns. # The created columns will be logical (i.e. TRUE / FALSE).  df <- dta_mrq(   dat = dat,   .column = gadgets_owned,   delimeter = \", \",   is_clean_names = TRUE ) dta_gtable(df)"},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"exploratory-data-analysis-functions","dir":"Articles","previous_headings":"Functions","what":"Exploratory data analysis functions","title":"Efficient Data Management and Manipulation","text":"dta_freq() Get frequency distribution specific column. dta_freq_mrq() Frequency table multiple response questions. dta_crosstab() Generate cross tabulations optional percentages totals.","code":"data(\"data_sample\") tab <- dta_freq(dat = data_sample, .column = region) dta_gtable(tab) # Remove the percentage symbol  tab2 <- dta_freq(   dat = data_sample,   .column = region,   is_sorted = TRUE,   is_decreasing = TRUE,   add_percent_symbol = FALSE ) dta_gtable(tab2) data(\"data_sample\")  # An example with multiple response variables labelled # as Yes / No  result <- dta_freq_mrq(   dat = data_sample,   .columns = r:excel,   value = \"Yes\",   name = \"Programming proficiency\" ) dta_gtable(result) # Remove the percentage symbol  result2 <- dta_freq_mrq(   dat = data_sample,   .columns = r:excel,   value = \"Yes\",   name = \"Programming proficiency\",   add_percent_symbol = FALSE ) dta_gtable(result2) data(\"data_sample\") df <- data_sample  # Crosstabulation of frequencies (counts)  result <- dta_crosstab(   dat = df, .row = region, .column = age_group ) dta_gtable(result) # Calculate column percentages  result2 <- dta_crosstab(   dat = df,    .row = region,   .column = age_group,   cells = \"col\",   add_totals = \"col\" ) dta_gtable(result2) # Calculate row percentages  result3 <- dta_crosstab(   dat = df,   .row = region,   .column = age_group,   cells = \"row\",   add_totals = \"row\" ) dta_gtable(result3)"},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"other-utilities","dir":"Articles","previous_headings":"Functions","what":"Other utilities","title":"Efficient Data Management and Manipulation","text":"dta_to_numeric() Convert numeric strings data frame tibble numeric numbers.","code":"# A data frame with numeric character (a), characters (b) and numeric numbers (c)  df <- data.frame(   a = c(\"1\", \"2\", \"3\"),   b = c(\"A\", \"B\", \"C\"),   c = c(4, 5, 6) ) str(df) #> 'data.frame':    3 obs. of  3 variables: #>  $ a: chr  \"1\" \"2\" \"3\" #>  $ b: chr  \"A\" \"B\" \"C\" #>  $ c: num  4 5 6  df <- dta_to_numeric(df) str(df) #> tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>  $ a: num [1:3] 1 2 3 #>  $ b: chr [1:3] \"A\" \"B\" \"C\" #>  $ c: num [1:3] 4 5 6"},{"path":"https://stemxresearch.github.io/dta/articles/dta.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Efficient Data Management and Manipulation","text":"document demonstrates functionality usage dta package, helping users manage, analyze, transform data efficiently. details, consult package documentation.","code":""},{"path":"https://stemxresearch.github.io/dta/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"John Indika. Author, maintainer.","code":""},{"path":"https://stemxresearch.github.io/dta/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Indika J (2025). dta: R Library Efficient Data Management Manipulation. R package version 0.1.0, https://github.com/stemxresearch/dta, https://stemxresearch.github.io/dta.","code":"@Manual{,   title = {dta: An R Library for Efficient Data Management and Manipulation},   author = {John Indika},   year = {2025},   note = {R package version 0.1.0, https://github.com/stemxresearch/dta},   url = {https://stemxresearch.github.io/dta}, }"},{"path":"https://stemxresearch.github.io/dta/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"An R Library for Efficient Data Management and Manipulation","text":"dta provides simple efficient tools data management manipulation, including functions clean, transform, format datasets using popular data-handling methods. aims simplify common data-wrangling tasks. include: dta_bmi() computes Body Mass Index (BMI) given weight height columns data frame tibble. dta_freq_mrq() Frequency table multiple response questions. dta_mrq() Split multiple response question column binary columns. dta_recode_auto() Automatically recode categorical variables data frame. dta_recode() Recode variables data frame based dictionary. dta_transpose() Transpose data frame specified column variable names. Among others. full list functions available documentation","code":""},{"path":"https://stemxresearch.github.io/dta/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"An R Library for Efficient Data Management and Manipulation","text":"","code":"install.packages(\"devtools\") devtools::install_github(\"stemxresearch/dta\")"},{"path":"https://stemxresearch.github.io/dta/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"An R Library for Efficient Data Management and Manipulation","text":"use dta package, must start loading using library() function shown .","code":"library(dta)"},{"path":"https://stemxresearch.github.io/dta/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"An R Library for Efficient Data Management and Manipulation","text":"Click Get Started link top menu follow link Getting started quick tutorial dta library.","code":""},{"path":"https://stemxresearch.github.io/dta/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"An R Library for Efficient Data Management and Manipulation","text":"Reference menu top menu page provides list functions available dta package help documentation including syntax examples.","code":""},{"path":"https://stemxresearch.github.io/dta/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"An R Library for Efficient Data Management and Manipulation","text":"encounter clear bug, please file issue minimal reproducible example GitHub.","code":""},{"path":"https://stemxresearch.github.io/dta/index.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of conduct","title":"An R Library for Efficient Data Management and Manipulation","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://stemxresearch.github.io/dta/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 dta authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for body mass index (BMI) calculations. — data_bmi","title":"Sample data for body mass index (BMI) calculations. — data_bmi","text":"dataset containing information individuals, including ID, age, height, weight.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for body mass index (BMI) calculations. — data_bmi","text":"","code":"data(\"data_bmi\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_bmi.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for body mass index (BMI) calculations. — data_bmi","text":"tibble 15 rows 4 variables: id character: Unique identifier individual age numeric: Age individual years. height numeric: Height individual meters. weight numeric: Weight individual kilograms.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmi.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for body mass index (BMI) calculations. — data_bmi","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data for body mass index (BMI) calculations. — data_bmi","text":"","code":"dta_gtable(data_bmi)     id       age       height       weight     STM/4921 50 1.64 59STM/4396 34 1.98 57STM/7908 50 1.95 84STM/7243 39 1.52 63STM/4801 52 1.69 65STM/5134 50 1.71 73STM/7138 35 1.73 46STM/6802 72 1.98 70STM/4420 42 1.62 103STM/6351 40 1.89 96STM/4933 38 1.91 67STM/4303 37 1.56 75STM/7465 45 1.62 44STM/4587 67 1.38 51STM/5320 44 1.37 63"},{"path":"https://stemxresearch.github.io/dta/reference/data_bmicat.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for body mass index (BMI) categorization. — data_bmicat","title":"Sample data for body mass index (BMI) categorization. — data_bmicat","text":"dataset containing information individuals, including ID calculated Body Mass Index (BMI).","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmicat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for body mass index (BMI) categorization. — data_bmicat","text":"","code":"data(\"data_bmicat\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_bmicat.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for body mass index (BMI) categorization. — data_bmicat","text":"tibble 15 rows 2 variables: id character: Unique identifier individual bmi numeric: Body Mass Index (BMI)","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmicat.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for body mass index (BMI) categorization. — data_bmicat","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_bmicat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data for body mass index (BMI) categorization. — data_bmicat","text":"","code":"dta_gtable(data_bmicat)     id       bmi     STM/4921 21.93635STM/4396 14.53933STM/7908 22.09073STM/7243 27.26801STM/4801 22.75831STM/5134 24.96495STM/7138 15.36971STM/6802 17.85532STM/4420 39.24707STM/6351 26.87495STM/4933 18.36572STM/4303 30.81854STM/7465 16.76574STM/4587 26.78009STM/5320 33.56599"},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data: Survival of cancer patients in days. — data_cancer","title":"Sample data: Survival of cancer patients in days. — data_cancer","text":"dataset containing information number days patients survived diagonized level IV cancer. cancer types organized rows. use dataset demonstrate transposing datasets.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data: Survival of cancer patients in days. — data_cancer","text":"","code":"data(\"data_cancer\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data: Survival of cancer patients in days. — data_cancer","text":"data frame 4 rows 18 variables: cancer_type character: Type cancer (e.g., \"stomach\", \"bronchus\", \"colon\", \"ovary\"). V1 numeric: Number days. V2 numeric: Number days. V3 numeric: Number days. V4 numeric: Number days. V5 numeric: Number days. V6 numeric: Number days. V7 numeric: Number days. V8 numeric: Number days. V9 numeric: Number days. V10 numeric: Number days. V11 numeric: Number days. V12 numeric: Number days. V13 numeric: Number days. V14 numeric: Number days. V15 numeric: Number days. V16 numeric: Number days. V17 numeric: Number days.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data: Survival of cancer patients in days. — data_cancer","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data: Survival of cancer patients in days. — data_cancer","text":"","code":"dta_gtable(data_cancer)     cancer_type       V1       V2       V3       V4       V5       V6       V7       V8       V9       V10       V11       V12       V13       V14       V15       V16       V17     stomach 124 42 25 45 412 51 1112 46 103 876 146 340 396    bronchus 81 461 20 450 246 166 63 64 155 859 151 166 37 223 138 72 245colon 248 372 189 1843 180 537 519 455 406 365 942 776 372 163 101 20 283ovary 1234 89 201 356 2970 456"},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer2.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data: Survival of cancer patients in days. — data_cancer2","title":"Sample data: Survival of cancer patients in days. — data_cancer2","text":"dataset containing information number days patients survived diagonized level IV cancer. cancer types organized rows. use dataset demonstrate transposing datasets.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data: Survival of cancer patients in days. — data_cancer2","text":"","code":"data(\"data_cancer2\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer2.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data: Survival of cancer patients in days. — data_cancer2","text":"data frame 4 rows 18 variables: V1 numeric: Number days. V2 numeric: Number days. V3 numeric: Number days. V4 numeric: Number days. V5 numeric: Number days. V6 numeric: Number days. V7 numeric: Number days. V8 numeric: Number days. V9 numeric: Number days. V10 numeric: Number days. V11 numeric: Number days. V12 numeric: Number days. V13 numeric: Number days. V14 numeric: Number days. V15 numeric: Number days. V16 numeric: Number days. V17 numeric: Number days.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer2.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data: Survival of cancer patients in days. — data_cancer2","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_cancer2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data: Survival of cancer patients in days. — data_cancer2","text":"","code":"dta_gtable(data_cancer2)     V1       V2       V3       V4       V5       V6       V7       V8       V9       V10       V11       V12       V13       V14       V15       V16       V17     124 42 25 45 412 51 1112 46 103 876 146 340 396    81 461 20 450 246 166 63 64 155 859 151 166 37 223 138 72 245248 372 189 1843 180 537 519 455 406 365 942 776 372 163 101 20 2831234 89 201 356 2970 456"},{"path":"https://stemxresearch.github.io/dta/reference/data_gadgets.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data: Gadgets owned by individuals — data_gadgets","title":"Sample data: Gadgets owned by individuals — data_gadgets","text":"dataset containing information gadgets owned individuals. entry lists one gadgets separated commas.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_gadgets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data: Gadgets owned by individuals — data_gadgets","text":"","code":"data(\"data_gadgets\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_gadgets.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data: Gadgets owned by individuals — data_gadgets","text":"tibble 15 rows 1 variable: gadgets_owned character: comma-separated list gadgets owned individuals.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_gadgets.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data: Gadgets owned by individuals — data_gadgets","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_gadgets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data: Gadgets owned by individuals — data_gadgets","text":"","code":"dta_gtable(data_gadgets)     gadgets_owned     Smartwatch, Tablet, SmartphoneTablet, Smartwatch, Smart TV, Desktop ComputerSmartphoneLaptop, TabletTablet, Smart TV, Digital Camera, LaptopLaptop, Desktop Computer, Digital Camera, Smart TV, SmartphoneDigital Camera, Smartphone, Desktop Computer, SmartwatchSmartwatch, Smart TV, Laptop, SmartphoneDesktop ComputerSmartphone, Laptop, Smart TV, SmartwatchTabletDigital Camera, Tablet, Desktop ComputerDigital Camera, Desktop Computer, Smart TV, Smartwatch, LaptopTablet, Desktop Computer, Smart TVDigital Camera, Desktop Computer, Smart TV, Smartphone, Laptop"},{"path":"https://stemxresearch.github.io/dta/reference/data_misspelled.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample dataset with general information. — data_misspelled","title":"Sample dataset with general information. — data_misspelled","text":"dataset contains information individuals, including demographics, education, skills various tools, socioeconomic status.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_misspelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample dataset with general information. — data_misspelled","text":"","code":"data(\"data_misspelled\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_misspelled.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample dataset with general information. — data_misspelled","text":"data frame 50 rows 15 variables: id character: Unique identifier individuals. region character: Region residence. age numeric: Age individual (years). height numeric: Height individual (meters). weight numeric: Weight individual (kilograms). blood_group character: Blood group individual. marital_status character: Marital status individual. education character: Highest level education attained. ses character: Socioeconomic status. r character: Proficiency R programming. python character: Proficiency Python programming. sas character: Proficiency SAS. stata character: Proficiency Stata. spss character: Proficiency SPSS. excel character: Proficiency Excel.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_misspelled.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample dataset with general information. — data_misspelled","text":"Simulated data illustrative purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_misspelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample dataset with general information. — data_misspelled","text":"","code":"dta_gtable(data_misspelled)     id       region       age       height       weight       blood_group       marital_status       education       ses       r       python       sas       stata       spss       excel     STM/7539 southern 46 1.85 77 ba Other BSC medium n n yes tru n nSTM/7993 South 45 1.64 53 AB maried Bsc Midle y N n no tru NSTM/7387 southern 37 1.61 75 B single BSC Middle N tru no Yes No nSTM/5598 West 45 1.80 69 B Single MSc low y N y fasle no YesSTM/5901 South 51 1.81 53 A+ Others Bachelors Medium no yes Yes n tru YesSTM/7529 North-East 56 1.35 56 O Single Bsc Mediam yes fasle no yes tru noSTM/7238 North East 37 1.44 89 o Single Bachelers High No n Yes No yes noSTM/5417 North-East 50 1.67 73 o single MSc High No y Yes tru N yesSTM/5907 Central 38 1.48 86 o Other Bachelers Midle N tru y yes fasle nSTM/7877 Central 48 1.71 76 O Others Bachelors low N N tru n fasle noSTM/4762 South 41 1.96 81 ab Singel Bachelors Middle fasle tru no no no noSTM/7345 North-East 24 1.98 77 a Others MSc medium no Yes n No N YesSTM/6968 wset 34 1.98 75 A+ Other Bachelers low yes N fasle y Yes truSTM/5816 West 43 1.76 75 B maried PhD Medium tru y n Yes tru fasleSTM/7707 southern 63 1.92 67 o maried Bsc Medium No yes tru Yes No truSTM/7449 North East 59 1.69 74 AB Other MSc Midle N fasle no no N NoSTM/6853 southern 35 1.43 72 A Married Doctoral Midle tru fasle no y tru fasleSTM/5634 North East 22 1.63 72 o maried Doctorate Medium No y N y No truSTM/4584 North East 62 1.92 87 AB Other Masters Midle Yes fasle yes tru yes yesSTM/4946 southern 41 1.40 93 O Singel PhD medium fasle N tru yes n nSTM/6798 North East 60 1.95 109 A Married Bachelors low No N N Yes y YesSTM/4377 North East 44 1.50 44 A Others BSC low yes No n fasle yes nSTM/5435 Central 30 1.96 58 ba single MSc Hihg fasle N fasle No Yes fasleSTM/5562 southern 71 1.95 74 AB Others Bsc Midle Yes No tru Yes No yesSTM/7617 North East 53 1.91 53 a Others Doctorate Low No N fasle y N NSTM/6677 South 60 1.96 72 B Single Bachelors medium n fasle tru N n NSTM/4773 wset 41 1.39 74 A Married Bsc High fasle No n yes N NSTM/5416 Central 64 1.98 59 A maried Bachelors Middle Yes Yes no fasle fasle noSTM/4805 South 27 1.91 53 o Singel Bachelors low fasle No yes yes n fasleSTM/5493 wset 63 1.38 66 ba Married MSc medium Yes Yes no Yes tru NoSTM/7650 South 54 1.88 56 ba Others MSc Middle y fasle N No yes nSTM/5458 wset 61 1.95 85 a single BSC Hihg No Yes N fasle Yes NoSTM/6102 South 35 1.71 62 o Others Bsc Low y No Yes Yes N fasleSTM/7508 wset 29 1.77 82 ba Married Doctorate Mediam no no N No yes fasleSTM/4121 southern 37 1.78 70 B Others PhD medium No Yes y N N fasleSTM/4830 North-East 41 1.69 65 a Single Doctorate High No y fasle tru Yes noSTM/6271 Central 58 1.56 77 AB maried MSc Mediam n fasle N tru n NSTM/7818 North East 61 1.65 82 a maried MSc low n yes fasle tru fasle noSTM/4671 Central 36 1.56 58 A+ Singel MSc High n n yes fasle N fasleSTM/5864 southern 40 1.95 76 o Singel Bsc medium tru fasle n y no nSTM/4951 North East 52 1.80 77 B Others Bachelors medium tru no n fasle tru yesSTM/6287 wset 25 1.47 81 O maried Doctorate Middle yes no tru tru fasle fasleSTM/4340 North East 50 1.95 84 ab Other Bachelors Middle Yes n fasle y yes NoSTM/5202 North-East 55 1.49 52 o Others Doctorate Middle y Yes n n n noSTM/7939 wset 49 1.47 87 B maried Masters Hihg fasle tru y tru y ySTM/4201 North-East 35 1.66 89 ab single Bachelors Midle fasle no no N no fasleSTM/6411 Central 32 1.90 72 B single PhD High tru Yes N No tru truSTM/4685 South 68 1.52 85 a Single PhD Low N no tru No Yes NSTM/5343 North East 48 1.36 54 ba Other Bachelers High Yes N n y yes YesSTM/5129 wset 55 1.72 86 ba Others Doctorate low yes Yes yes Yes fasle No"},{"path":"https://stemxresearch.github.io/dta/reference/data_phone.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for phone satistifaction feedback. — data_phone","title":"Sample data for phone satistifaction feedback. — data_phone","text":"dataset containing reviews various phone models, including user ratings ease use, battery life, camera quality, value money, design appearance.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_phone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for phone satistifaction feedback. — data_phone","text":"","code":"data(\"data_phone\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_phone.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for phone satistifaction feedback. — data_phone","text":"tibble 15 rows 6 variables: id numeric: Unique identifier review. phone_type character: phone model (OnePlus, Sumsung, Google, Apple). ease_of_use character: Rating ease use. battery_life character: Rating battery life. camera_quality character: Rating camera quality. value_for_money character: Rating value money. design_and_appearance character: Rating design appearance.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_phone.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for phone satistifaction feedback. — data_phone","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_phone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data for phone satistifaction feedback. — data_phone","text":"","code":"dta_gtable(data_phone)     id       phone_type       ease_of_use       battery_life       camera_quality       value_for_money       design_and_appearance     1 OnePlus Disagree Strongly Disagree Strongly Agree Agree Strongly Agree2 Sumsung Neutral Strongly Agree Strongly Disagree Strongly Agree Strongly Agree3 OnePlus Strongly Disagree Neutral Strongly Agree Strongly Disagree Disagree4 Google Neutral Agree Agree Neutral Strongly Disagree5 Sumsung Disagree Disagree Agree Disagree Neutral6 Sumsung Agree Agree Agree Disagree Strongly Agree7 Google Neutral Disagree Agree Strongly Agree Strongly Disagree8 Sumsung Disagree Strongly Agree Strongly Agree Agree Strongly Agree9 OnePlus Strongly Disagree Agree Disagree Strongly Agree Agree10 Sumsung Neutral Disagree Strongly Disagree Neutral Agree11 Google Neutral Agree Strongly Disagree Strongly Agree Neutral12 Sumsung Strongly Agree Disagree Agree Strongly Disagree Disagree13 Apple Disagree Disagree Strongly Agree Strongly Disagree Strongly Disagree14 Apple Disagree Strongly Disagree Neutral Strongly Disagree Agree15 OnePlus Neutral Neutral Neutral Neutral Strongly Agree"},{"path":"https://stemxresearch.github.io/dta/reference/data_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for demographic and socioeconomic information. — data_rename","title":"Sample data for demographic and socioeconomic information. — data_rename","text":"dataset containing demographic information individuals, including unique identifier, age, height, weight, marital status, education level, employment status, socioeconomic status.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for demographic and socioeconomic information. — data_rename","text":"","code":"data(\"data_rename\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_rename.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for demographic and socioeconomic information. — data_rename","text":"tibble 15 rows 9 variables: uniqueidentifier character: Unique identifier individual. where_from character: region individual . age numeric: Age individual years. height numeric: Height individual meters. weight numeric: Weight individual kilograms. group character: Blood type group individual. maritalstatus character: Marital status individual. highesteducationlevel character: highest education level attained individual. employed character: Employment status individual. socioeconomicstatus character: socioeconomic status individual.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_rename.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for demographic and socioeconomic information. — data_rename","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data for demographic and socioeconomic information. — data_rename","text":"","code":"dta_gtable(data_rename)     uniqueidentifier       where_from       age       height       weight       group       maritalstatus       highesteducationlevel       employed       socioeconomicstatus     STM/4921 North East 50 1.64 59 AB Married Bachelors Yes HighSTM/4396 Central 34 1.98 57 A Married Masters Yes LowSTM/7908 West 50 1.95 84 A Married Bachelors Yes LowSTM/7243 Central 39 1.52 63 O Single Masters Yes HighSTM/4801 Central 52 1.69 65 AB Single Doctorate No LowSTM/5134 West 50 1.71 73 AB Married Doctorate No MiddleSTM/7138 West 35 1.73 46 A Single Bachelors No HighSTM/6802 West 72 1.98 70 B Single Doctorate No LowSTM/4420 West 42 1.62 103 AB Single Masters No MiddleSTM/6351 North East 40 1.89 96 A Other Doctorate Yes HighSTM/4933 West 38 1.91 67 B Married Bachelors Yes HighSTM/4303 West 37 1.56 75 A Single Bachelors No LowSTM/7465 South 45 1.62 44 AB Married Bachelors Yes LowSTM/4587 Central 67 1.38 51 O Married Bachelors No LowSTM/5320 South 44 1.37 63 AB Married Bachelors No Middle"},{"path":"https://stemxresearch.github.io/dta/reference/data_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Sample data for demographic, technology, and employment information. — data_sample","title":"Sample data for demographic, technology, and employment information. — data_sample","text":"dataset containing demographic information individuals, including unique identifier, age, height, weight, marital status, education level, employment status, socioeconomic status, language, technology ownership, skills various tools.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sample data for demographic, technology, and employment information. — data_sample","text":"","code":"data(\"data_sample\")"},{"path":"https://stemxresearch.github.io/dta/reference/data_sample.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Sample data for demographic, technology, and employment information. — data_sample","text":"tibble 10 rows 19 variables: id character: Unique identifier individual. region character: region individual . age numeric: Age individual years. age_group character: Age group individual. height numeric: Height individual meters. weight numeric: Weight individual kilograms. blood_group character: Blood group individual. marital_status character: Marital status individual. education character: highest level education attained. employed character: Employment status individual. ses character: Socioeconomic status individual. language character: primary language spoken individual. phone character: type phone individual uses. transport character: primary mode transport used individual. gadgets_owned character: comma-separated list gadgets owned individual. r character: Whether individual skills R. python character: Whether individual skills Python. sas character: Whether individual skills SAS. stata character: Whether individual skills Stata. spss character: Whether individual skills SPSS. excel character: Whether individual skills Excel.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_sample.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Sample data for demographic, technology, and employment information. — data_sample","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/data_sample.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sample data for demographic, technology, and employment information. — data_sample","text":"","code":"dta_gtable(head(data_sample))     id       region       age       age_group       height       weight       blood_group       marital_status       education       employed       ses       language       phone       transport       gadgets_owned       r       python       sas       stata       spss       excel     STM/7539 Central 56 50-59 1.70 73 AB Married Bachelors Yes Middle Mandarin OnePlus Bicycle Smart TV, Tablet, Desktop Computer, Digital Camera, Smartphone No No No No No YesSTM/7993 Central 46 40-49 1.57 53 B Married Bachelors No Middle French OnePlus Train Smartphone, Smart TV No Yes No No No NoSTM/7387 South 45 40-49 1.47 85 AB Married Bachelors No High Arabic Samsung Car Tablet, Smart TV, Smartwatch, Desktop Computer, Laptop No Yes No Yes Yes NoSTM/5598 West 37 30-39 1.67 77 AB Single Bachelors Yes Middle English OnePlus Bus Desktop Computer, Digital Camera, Smartphone, Smart TV, Tablet No Yes No Yes No NoSTM/5901 North East 45 40-49 1.69 53 A Single Bachelors Yes Low Arabic OnePlus Bus Smartwatch, Desktop Computer No No No Yes Yes NoSTM/7529 North East 51 50-59 1.90 75 A Married Bachelors No Middle Mandarin Samsung Bus Desktop Computer, Smartwatch, Tablet Yes Yes No No No No"},{"path":"https://stemxresearch.github.io/dta/reference/dict_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary with variable labels. — dict_labels","title":"Dictionary with variable labels. — dict_labels","text":"dictionary containing names variables descriptive labels.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary with variable labels. — dict_labels","text":"","code":"data(\"dict_labels\")"},{"path":"https://stemxresearch.github.io/dta/reference/dict_labels.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary with variable labels. — dict_labels","text":"tibble 3 rows 2 variables: names character: variable name dataset. labels character: brief description variable.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_labels.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dictionary with variable labels. — dict_labels","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary with variable labels. — dict_labels","text":"","code":"dta_gtable(dict_labels)     names       labels     age Age in yearsheight Height in metersweight Weight in kilograms"},{"path":"https://stemxresearch.github.io/dta/reference/dict_misspelled.html","id":null,"dir":"Reference","previous_headings":"","what":"A dictionary with variable mappings for data standardization. — dict_misspelled","title":"A dictionary with variable mappings for data standardization. — dict_misspelled","text":"dataset containing mappings old values new values certain specified variables dataset.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_misspelled.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dictionary with variable mappings for data standardization. — dict_misspelled","text":"","code":"data(\"dict_misspelled\")"},{"path":"https://stemxresearch.github.io/dta/reference/dict_misspelled.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dictionary with variable mappings for data standardization. — dict_misspelled","text":"tibble 29 rows 3 variables: variable character: variable old new values mapped. old character: old value replaced. new character: new value replace old value.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_misspelled.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A dictionary with variable mappings for data standardization. — dict_misspelled","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_misspelled.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A dictionary with variable mappings for data standardization. — dict_misspelled","text":"","code":"dta_gtable(dict_misspelled)     variable       old       new     region southern South wset West North-East North Eastblood_group ba AB ab  o O A+ A a marital_status maried Married single Single Singel  Others Othereducation BSC Bachelors Bsc  Bachelers  MSc Masters PhD Doctorate Doctoral ses medium Middle Midle  Mediam  low Low Hihg High.global fasle No N  n  no  yes Yes y  tru"},{"path":"https://stemxresearch.github.io/dta/reference/dict_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"A dictionary with ariable value mappings with labels and ordered status. — dict_recode","title":"A dictionary with ariable value mappings with labels and ordered status. — dict_recode","text":"dictionary containing value mappings various variables, along corresponding labels whether values ordered.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dictionary with ariable value mappings with labels and ordered status. — dict_recode","text":"","code":"data(\"dict_recode\")"},{"path":"https://stemxresearch.github.io/dta/reference/dict_recode.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dictionary with ariable value mappings with labels and ordered status. — dict_recode","text":"tibble 50 rows 4 variables: names character: variable name. values numeric: numeric value assigned label. labels character: label corresponding numeric value. is_ordered numeric: Indicates whether variable ordered. value 1 indicates ordered, 0 indicates unordered.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_recode.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A dictionary with ariable value mappings with labels and ordered status. — dict_recode","text":"Simulated data demonstration purposes.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A dictionary with ariable value mappings with labels and ordered status. — dict_recode","text":"","code":"dta_gtable(dict_recode)     names       values       labels       is_ordered     region 1 Central 0 2 North East  3 South  4 West age_group 1 20-29 1 2 30-39  3 40-49  4 50-59  5 60-69  6 70+ blood_group 1 A 0 2 B  3 AB  4 O marital_status 1 Single 0 2 Married  3 Other education 1 Bachelors 1 2 Masters  3 Doctorate employed 0 No 0 1 Yes ses 1 Low 1 2 Middle  3 High language 1 English 0 2 French  3 Spanish  4 Arabic  5 Mandarin  6 Other phone 0 None 0 1 Samsung  2 Apple  3 Xiaomi  4 OnePlus  5 Google  6 Other transport 1 Walking 0 2 Bicycle  3 Car  4 Bus  5 Train r 0 No 0 1 Yes python 0 No 0 1 Yes sas 0 No 0 1 Yes stata 0 No 0 1 Yes spss 0 No 0 1 Yes excel 0 No 0 1 Yes"},{"path":"https://stemxresearch.github.io/dta/reference/dict_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"A dictionary for variable name changes. — dict_rename","title":"A dictionary for variable name changes. — dict_rename","text":"dictionary containing mappings old variable names corresponding new names.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A dictionary for variable name changes. — dict_rename","text":"","code":"data(\"dict_rename\")"},{"path":"https://stemxresearch.github.io/dta/reference/dict_rename.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A dictionary for variable name changes. — dict_rename","text":"tibble 9 rows 2 variables: old character: old variable name. new character: new variable name old one changed .","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_rename.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"A dictionary for variable name changes. — dict_rename","text":"Simulated data variable name mapping.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dict_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A dictionary for variable name changes. — dict_rename","text":"","code":"dta_gtable(dict_rename)     old       new     uniqueidentifier idwhere_from regionage age_yearsheight height_metersweight weight_kggroup age_groupmaritalstatus marital_statushighesteducationlevel education_levelemployed employment_statussocioeconomicstatus ses"},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmi.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate body mass index (BMI) — dta_bmi","title":"Calculate body mass index (BMI) — dta_bmi","text":"dta_bmi() computes Body Mass Index (BMI) given weight height columns data frame tibble. allows customization weight height units.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate body mass index (BMI) — dta_bmi","text":"","code":"dta_bmi(   dat,   .weight,   .height,   weight_units = c(\"kg\", \"lbs\"),   height_units = c(\"m\", \"in\"),   name = \"bmi\",   digits = NULL )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate body mass index (BMI) — dta_bmi","text":"dat data frame tibble containing weight height columns. .weight Name column representing weight data. .height Name column representing height data. weight_units Character string specifying units weight. Options \"kg\" kilograms \"lbs\" pounds. Default \"kg\". height_units Character string specifying units height. Options \"m\" meters \"\" inches. Default \"m\". name Character string specifying name new BMI column. Default bmi. digits Integer specifying number decimal places rounding BMI value. Default NULL.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate body mass index (BMI) — dta_bmi","text":"tibble calculated body mass index (BMI).","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmi.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate body mass index (BMI) — dta_bmi","text":"https://www.cdc.gov/bmi/adult-calculator/bmi-categories.html","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate body mass index (BMI) — dta_bmi","text":"","code":"data(\"data_bmi\") dta_gtable(data_bmi)     id       age       height       weight     STM/4921 50 1.64 59STM/4396 34 1.98 57STM/7908 50 1.95 84STM/7243 39 1.52 63STM/4801 52 1.69 65STM/5134 50 1.71 73STM/7138 35 1.73 46STM/6802 72 1.98 70STM/4420 42 1.62 103STM/6351 40 1.89 96STM/4933 38 1.91 67STM/4303 37 1.56 75STM/7465 45 1.62 44STM/4587 67 1.38 51STM/5320 44 1.37 63 # Calculate BMI from the columns `weight` and `height`  df <- dta_bmi(   dat = data_bmi,   .weight = weight,   .height = height ) dta_gtable(df)     id       age       height       weight       bmi     STM/4921 50 1.64 59 21.93635STM/4396 34 1.98 57 14.53933STM/7908 50 1.95 84 22.09073STM/7243 39 1.52 63 27.26801STM/4801 52 1.69 65 22.75831STM/5134 50 1.71 73 24.96495STM/7138 35 1.73 46 15.36971STM/6802 72 1.98 70 17.85532STM/4420 42 1.62 103 39.24707STM/6351 40 1.89 96 26.87495STM/4933 38 1.91 67 18.36572STM/4303 37 1.56 75 30.81854STM/7465 45 1.62 44 16.76574STM/4587 67 1.38 51 26.78009STM/5320 44 1.37 63 33.56599 # Calculate BMI from the columns `weight` and `height` # to 2 decimal points and assign the values to the new # variable named `body_mass_index`  df2 <- dta_bmi(   dat = data_bmi,   .weight = weight,   .height = height,   name = body_mass_index,   digits = 2 ) dta_gtable(df2)     id       age       height       weight       body_mass_index     STM/4921 50 1.64 59 21.94STM/4396 34 1.98 57 14.54STM/7908 50 1.95 84 22.09STM/7243 39 1.52 63 27.27STM/4801 52 1.69 65 22.76STM/5134 50 1.71 73 24.96STM/7138 35 1.73 46 15.37STM/6802 72 1.98 70 17.86STM/4420 42 1.62 103 39.25STM/6351 40 1.89 96 26.87STM/4933 38 1.91 67 18.37STM/4303 37 1.56 75 30.82STM/7465 45 1.62 44 16.77STM/4587 67 1.38 51 26.78STM/5320 44 1.37 63 33.57"},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmicat.html","id":null,"dir":"Reference","previous_headings":"","what":"Categorize BMI into weight categories — dta_bmicat","title":"Categorize BMI into weight categories — dta_bmicat","text":"dta_bmicat() categorizes Body Mass Index (BMI) values specified weight categories.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmicat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Categorize BMI into weight categories — dta_bmicat","text":"","code":"dta_bmicat(   dat,   .bmi,   name = \"bmi_cat\",   is_extended = FALSE,   out_of_range = \"\",   as_factor = TRUE,   as_numeric = FALSE )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmicat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Categorize BMI into weight categories — dta_bmicat","text":"dat data frame tibble containing BMI data. .bmi name column dat containing BMI values. name character string specifying name new column created BMI categories. Default bmi_cat. is_extended logical value indicating whether use extended BMI categories. TRUE, includes Class 1, 2, 3 obesity. Default FALSE. See Details section information. out_of_range character string specifying label --range BMI values. Default empty string. as_factor logical value indicating whether return BMI categories factor. Default TRUE. as_numeric logical value indicating whether convert factor numeric. applicable as_factor TRUE. Default FALSE.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmicat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Categorize BMI into weight categories — dta_bmicat","text":"data frame tibble additional column BMI categories.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmicat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Categorize BMI into weight categories — dta_bmicat","text":"standard BMI categories defined follows: Underweight BMI < 18.5 Healthy weight 18.5 ≤ BMI < 25.0 Overweight 25.0 ≤ BMI < 30.0 Obesity BMI ≥ 30.0 is_extended set TRUE, extended BMI categories : Underweight BMI < 18.5 Healthy weight 18.5 ≤ BMI < 25.0 Overweight 25.0 ≤ BMI < 30.0 Class Obesity 30.0 ≤ BMI < 35.0 Class II Obesity 35.0 ≤ BMI < 40.0 Class III Obesity (Severe) BMI ≥ 40.0","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_bmicat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Categorize BMI into weight categories — dta_bmicat","text":"","code":"data(\"data_bmicat\") dta_gtable(data_bmicat)     id       bmi     STM/4921 21.93635STM/4396 14.53933STM/7908 22.09073STM/7243 27.26801STM/4801 22.75831STM/5134 24.96495STM/7138 15.36971STM/6802 17.85532STM/4420 39.24707STM/6351 26.87495STM/4933 18.36572STM/4303 30.81854STM/7465 16.76574STM/4587 26.78009STM/5320 33.56599 # Categorize `bmi` into the standard BMI categories  df <- dta_bmicat(   dat = data_bmicat,   .bmi = bmi,   name = bmi_cat,   is_extended = FALSE,   as_factor = TRUE ) dta_gtable(df)     id       bmi       bmi_cat     STM/4921 21.93635 Healthy weightSTM/4396 14.53933 UnderweightSTM/7908 22.09073 Healthy weightSTM/7243 27.26801 OverweightSTM/4801 22.75831 Healthy weightSTM/5134 24.96495 Healthy weightSTM/7138 15.36971 UnderweightSTM/6802 17.85532 UnderweightSTM/4420 39.24707 ObesitySTM/6351 26.87495 OverweightSTM/4933 18.36572 UnderweightSTM/4303 30.81854 ObesitySTM/7465 16.76574 UnderweightSTM/4587 26.78009 OverweightSTM/5320 33.56599 Obesity # Categorize `bmi` into the extended BMI categories  df2 <- dta_bmicat(   dat = data_bmicat,   .bmi = bmi,   name = bmi_cat,   is_extended = TRUE,   as_factor = TRUE ) dta_gtable(df2)     id       bmi       bmi_cat     STM/4921 21.93635 Healthy weightSTM/4396 14.53933 UnderweightSTM/7908 22.09073 Healthy weightSTM/7243 27.26801 OverweightSTM/4801 22.75831 Healthy weightSTM/5134 24.96495 Healthy weightSTM/7138 15.36971 UnderweightSTM/6802 17.85532 UnderweightSTM/4420 39.24707 Class 2 ObesitySTM/6351 26.87495 OverweightSTM/4933 18.36572 UnderweightSTM/4303 30.81854 Class 1 ObesitySTM/7465 16.76574 UnderweightSTM/4587 26.78009 OverweightSTM/5320 33.56599 Class 1 Obesity # Categorize `bmi` into the standard BMI categories and # convert to numeric  df3 <- dta_bmicat(   dat = data_bmicat,   .bmi = bmi,   name = bmi_cat,   is_extended = TRUE,   as_factor = TRUE,   as_numeric = TRUE ) dta_gtable(df3)     id       bmi       bmi_cat     STM/4921 21.93635 2STM/4396 14.53933 1STM/7908 22.09073 2STM/7243 27.26801 3STM/4801 22.75831 2STM/5134 24.96495 2STM/7138 15.36971 1STM/6802 17.85532 1STM/4420 39.24707 5STM/6351 26.87495 3STM/4933 18.36572 1STM/4303 30.81854 4STM/7465 16.76574 1STM/4587 26.78009 3STM/5320 33.56599 4"},{"path":"https://stemxresearch.github.io/dta/reference/dta_columns.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve column names from a data frame — dta_columns","title":"Retrieve column names from a data frame — dta_columns","text":"dta_columns() retrieves names specified columns data frame tibble.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_columns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve column names from a data frame — dta_columns","text":"","code":"dta_columns(dat, .columns, is_one_column = FALSE)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_columns.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve column names from a data frame — dta_columns","text":"dat data frame tibble select columns. .columns Column name(s) selected dat. Supports tidy selection syntax. is_one_column logical value indicating whether one column selected. TRUE one column selected, error thrown. Default FALSE.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_columns.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Retrieve column names from a data frame — dta_columns","text":"character vector containing names selected columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_columns.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve column names from a data frame — dta_columns","text":"","code":"data(mtcars) dta_gtable(head(mtcars))     mpg       cyl       disp       hp       drat       wt       qsec       vs       am       gear       carb     21.0 6 160 110 3.90 2.620 16.46 0 1 4 421.0 6 160 110 3.90 2.875 17.02 0 1 4 422.8 4 108 93 3.85 2.320 18.61 1 1 4 121.4 6 258 110 3.08 3.215 19.44 1 0 3 118.7 8 360 175 3.15 3.440 17.02 0 0 3 218.1 6 225 105 2.76 3.460 20.22 1 0 3 1 dta_columns(mtcars, .columns = starts_with(\"c\")) #> [1] \"cyl\"  \"carb\"  dta_columns(mtcars, .columns = cyl:wt) #> [1] \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"    dta_columns(mtcars, .columns = c(mpg, hp, vs, gear)) #> [1] \"mpg\"  \"hp\"   \"vs\"   \"gear\"  try(dta_columns(mtcars, .columns = c(mpg, hp, vs, gear), is_one_column = TRUE)) #> Error in dta_columns(mtcars, .columns = c(mpg, hp, vs, gear), is_one_column = TRUE) :  #>   Expected 1 column but got 4 columns"},{"path":"https://stemxresearch.github.io/dta/reference/dta_crosstab.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cross tabulations with optional percentages and totals — dta_crosstab","title":"Generate cross tabulations with optional percentages and totals — dta_crosstab","text":"dta_crosstab() creates cross-tabulation (contingency table) given dataset, options include counts, row percentages, column percentages. Totals can also added rows, columns, . output styled using janitor package.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_crosstab.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cross tabulations with optional percentages and totals — dta_crosstab","text":"","code":"dta_crosstab(   dat,   .row,   .column,   cells = c(\"counts\", \"row\", \"col\"),   add_totals = c(\"both\", \"row\", \"col\"),   name = \"Variable\",   add_percent_symbol = TRUE,   digits = 2 )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_crosstab.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cross tabulations with optional percentages and totals — dta_crosstab","text":"dat data frame (tibble) containing variables tabulate. .row variable used rows crosstab. .column variable used columns crosstab. cells character string indicating type values display crosstab: \"counts\" Display counts (default). \"row\" Display row percentages. \"col\" Display column percentages. add_totals character string specifying add totals: \"\" Add totals rows columns (default). \"row\" Add totals rows . \"col\" Add totals columns . name character string rename first column output. Default \"Variable\". add_percent_symbol Logical indicating whether add % sign percentages. Default TRUE. digits integer specifying number decimal places use percentages. Default 1.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_crosstab.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cross tabulations with optional percentages and totals — dta_crosstab","text":"data frame representing cross-tabulation, styled using janitor functions. format output depends cells argument: Counts Displays raw counts. Percentages Displays percentages counts parentheses cells \"row\" \"col\".","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_crosstab.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cross tabulations with optional percentages and totals — dta_crosstab","text":"","code":"data(\"data_sample\") df <- data_sample  # Crosstabulation of frequencies (counts)  result <- dta_crosstab(   dat = df, .row = region, .column = age_group ) dta_gtable(result)     Variable       20-29       30-39       40-49       50-59       60-69       70+       Total     Central 33 68 100 80 45 30 356North East 65 133 199 174 127 66 764South 94 151 177 206 154 69 851West 50 93 117 128 96 45 529Total 242 445 593 588 422 210 2500 # Calculate column percentages  result2 <- dta_crosstab(   dat = df,    .row = region,   .column = age_group,   cells = \"col\",   add_totals = \"col\" ) dta_gtable(result2)     region/age_group       20-29       30-39       40-49       50-59       60-69       70+       Total     Central 33 (13.64%) 68 (15.28%) 100 (16.86%) 80 (13.61%) 45 (10.66%) 30 (14.29%) 356 (14.24%)North East 65 (26.86%) 133 (29.89%) 199 (33.56%) 174 (29.59%) 127 (30.09%) 66 (31.43%) 764 (30.56%)South 94 (38.84%) 151 (33.93%) 177 (29.85%) 206 (35.03%) 154 (36.49%) 69 (32.86%) 851 (34.04%)West 50 (20.66%) 93 (20.90%) 117 (19.73%) 128 (21.77%) 96 (22.75%) 45 (21.43%) 529 (21.16%) # Calculate row percentages  result3 <- dta_crosstab(   dat = df,   .row = region,   .column = age_group,   cells = \"row\",   add_totals = \"row\" ) dta_gtable(result3)     region/age_group       20-29       30-39       40-49       50-59       60-69       70+     Central 33  (9.27%) 68 (19.10%) 100 (28.09%) 80 (22.47%) 45 (12.64%) 30 (8.43%)North East 65  (8.51%) 133 (17.41%) 199 (26.05%) 174 (22.77%) 127 (16.62%) 66 (8.64%)South 94 (11.05%) 151 (17.74%) 177 (20.80%) 206 (24.21%) 154 (18.10%) 69 (8.11%)West 50  (9.45%) 93 (17.58%) 117 (22.12%) 128 (24.20%) 96 (18.15%) 45 (8.51%)Total 242  (9.68%) 445 (17.80%) 593 (23.72%) 588 (23.52%) 422 (16.88%) 210 (8.40%)  # Remove the percentages symbol  result4 <- dta_crosstab(   dat = df,   .row = region,   .column = age_group,   cells = \"row\",   add_totals = \"row\",   add_percent_symbol = FALSE ) dta_gtable(result4)     region/age_group       20-29       30-39       40-49       50-59       60-69       70+     Central 33  (9.27) 68 (19.10) 100 (28.09) 80 (22.47) 45 (12.64) 30 (8.43)North East 65  (8.51) 133 (17.41) 199 (26.05) 174 (22.77) 127 (16.62) 66 (8.64)South 94 (11.05) 151 (17.74) 177 (20.80) 206 (24.21) 154 (18.10) 69 (8.11)West 50  (9.45) 93 (17.58) 117 (22.12) 128 (24.20) 96 (18.15) 45 (8.51)Total 242  (9.68) 445 (17.80) 593 (23.72) 588 (23.52) 422 (16.88) 210 (8.40)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_drop_with_warning.html","id":null,"dir":"Reference","previous_headings":"","what":"Drop rows with missing values and issue a warning — dta_drop_with_warning","title":"Drop rows with missing values and issue a warning — dta_drop_with_warning","text":"dta_drop_with_warning() removes rows missing values (NA) specified columns data frame tibble. rows dropped, warning issued indicating number rows removed.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_drop_with_warning.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Drop rows with missing values and issue a warning — dta_drop_with_warning","text":"","code":"dta_drop_with_warning(dat, .columns = names(dat))"},{"path":"https://stemxresearch.github.io/dta/reference/dta_drop_with_warning.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Drop rows with missing values and issue a warning — dta_drop_with_warning","text":"dat data frame tibble rows missing values dropped. .columns Columns check missing values. Supports tidy selection syntax. Defaults NULL, meaning columns checked.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_drop_with_warning.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Drop rows with missing values and issue a warning — dta_drop_with_warning","text":"data frame tibble rows containing missing values specified columns removed.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_drop_with_warning.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Drop rows with missing values and issue a warning — dta_drop_with_warning","text":"","code":"df <- data.frame(x = c(1, 2, NA, 4), y = c(NA, 5, 6, 7)) dta_gtable(df)     x       y     1 2 5 64 7 # Drop rows with NA values in any column and issue a warning  dta_drop_with_warning(df) #> Warning: 2 rows with missing values (NA) were dropped #> # A tibble: 2 × 2 #>       x     y #>   <dbl> <dbl> #> 1     2     5 #> 2     4     7  # Drop rows with NA values in a specific column and issue a warning  dta_drop_with_warning(df, .columns = x) #> Warning: 1 row with missing values (NA) was dropped #> # A tibble: 3 × 2 #>       x     y #>   <dbl> <dbl> #> 1     1    NA #> 2     2     5 #> 3     4     7"},{"path":"https://stemxresearch.github.io/dta/reference/dta_duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Find duplicate rows based on specific columns — dta_duplicates","title":"Find duplicate rows based on specific columns — dta_duplicates","text":"dta_duplicates() identifies returns duplicate rows dataframe tibble, based specified columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find duplicate rows based on specific columns — dta_duplicates","text":"","code":"dta_duplicates(dat, .columns = names(dat))"},{"path":"https://stemxresearch.github.io/dta/reference/dta_duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find duplicate rows based on specific columns — dta_duplicates","text":"dat dataframe tibble. .columns set column names check duplicates. Defaults columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_duplicates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find duplicate rows based on specific columns — dta_duplicates","text":"dataframe tibble containing duplicate rows based specified column(s).","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find duplicate rows based on specific columns — dta_duplicates","text":"","code":"# Create a data frame for demonstration  df <- data.frame(   id = c(14, 20, 12, 32, 14, 23, 15, 12, 30, 14),   name = c(    \"Mary\", \"Mark\", \"Faith\", \"David\", \"Mary\", \"Daniel\", \"Christine\",    \"Johnson\", \"Elizabeth\", \"Mary\"   ),   age = c(21, 18, 25, 17, 21, 24, 21, 19, 20, 21) ) dta_gtable(df)     id       name       age     14 Mary 2120 Mark 1812 Faith 2532 David 1714 Mary 2123 Daniel 2415 Christine 2112 Johnson 1930 Elizabeth 2014 Mary 21 # return duplicated rows by all the columns in the data frame  result <- dta_duplicates(df) dta_gtable(result)     id       name       age     14 Mary 2114 Mary 2114 Mary 21 # return duplicated rows by the column `id`  result2 <- dta_duplicates(df, .columns = id) dta_gtable(result2)     id       name       age     14 Mary 2112 Faith 2514 Mary 2112 Johnson 1914 Mary 21 # A second demo data frame  df2 <- data.frame(  gender = c(    \"Male\", \"Female\", \"Female\", \"Male\", \"Male\", \"Female\", \"Male\", \"Female\"  ),  education = c(    \"Masters\", \"Bachelor\", \"Bachelor\", \"Masters\", \"Doctorate\", \"Masters\",    \"Bachelors\", \"Masters\"  ),  age = c(25, 30, 30, 25, 40, 25, 40, 25) ) dta_gtable(df2)     gender       education       age     Male Masters 25Female Bachelor 30Female Bachelor 30Male Masters 25Male Doctorate 40Female Masters 25Male Bachelors 40Female Masters 25 # return duplicated rows based to the columns 'gender' and 'education'  result2 <- dta_duplicates(df2, .columns = c(gender, education)) dta_gtable(result2)     gender       education       age     Male Masters 25Female Bachelor 30Female Bachelor 30Male Masters 25Female Masters 25Female Masters 25"},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq.html","id":null,"dir":"Reference","previous_headings":"","what":"Get frequency distribution of a specific column — dta_freq","title":"Get frequency distribution of a specific column — dta_freq","text":"dta_freq() calculates frequency distribution specified column dataframe, options sorting, showing missing values, customizing output.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get frequency distribution of a specific column — dta_freq","text":"","code":"dta_freq(   dat,   .column,   name = NULL,   is_sorted = FALSE,   is_decreasing = TRUE,   add_percent_symbol = TRUE,   digits = 2 )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get frequency distribution of a specific column — dta_freq","text":"dat dataframe. .column column dataframe frequency distribution calculated. name Optional. name column output. Defaults NULL. is_sorted Logical. TRUE, sorts results. Defaults FALSE. is_decreasing Logical. TRUE, sorts decreasing order. Defaults TRUE. add_percent_symbol Logical indicating whether add % sign percentages. Default TRUE. digits Integer. Number digits round percentage values . Defaults 1.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get frequency distribution of a specific column — dta_freq","text":"dataframe frequency counts, percentages, total specified column.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get frequency distribution of a specific column — dta_freq","text":"","code":"# Basic frequency distribution of 'region' column  data(\"data_sample\") tab <- dta_freq(dat = data_sample, .column = region) dta_gtable(tab)     Region of residence       Frequency       Percent     Central 356 14.24%North East 764 30.56%South 851 34.04%West 529 21.16%Total 2500 100.00% # Frequency distribution with sorting in increasing # order of frequency  tab2 <- dta_freq(   dat = data_sample,   .column = region,   is_sorted = TRUE,   is_decreasing = FALSE ) dta_gtable(tab2)     Region of residence       Frequency       Percent     Central 356 14.24%West 529 21.16%North East 764 30.56%South 851 34.04%Total 2500 100.00% # Frequency distribution with sorting in decreasing # order of frequency  tab3 <- dta_freq(   dat = data_sample,   .column = region,   is_sorted = TRUE,   is_decreasing = TRUE ) dta_gtable(tab3)     Region of residence       Frequency       Percent     South 851 34.04%North East 764 30.56%West 529 21.16%Central 356 14.24%Total 2500 100.00% # Remove the percentage symbol  tab3 <- dta_freq(   dat = data_sample,   .column = region,   is_sorted = TRUE,   is_decreasing = TRUE,   add_percent_symbol = FALSE ) dta_gtable(tab3)     Region of residence       Frequency       Percent     South 851 34.04North East 764 30.56West 529 21.16Central 356 14.24Total 2500 100.00"},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq_mrq.html","id":null,"dir":"Reference","previous_headings":"","what":"Frequency table for multiple response questions — dta_freq_mrq","title":"Frequency table for multiple response questions — dta_freq_mrq","text":"dta_freq_mrq() generates frequency table multiple response questions, calculating counts percentages specified values (e.g., \"Yes\") across multiple columns. also adds total row summed counts percentage responses.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq_mrq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Frequency table for multiple response questions — dta_freq_mrq","text":"","code":"dta_freq_mrq(   dat,   .columns,   value,   name = \"Options\",   add_percent_symbol = TRUE,   digits = 2 )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq_mrq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Frequency table for multiple response questions — dta_freq_mrq","text":"dat data frame containing data analyzed. .columns list columns (unquoted column names) analyze. Multiple columns can passed. value value count responses (default \"Yes\"). name name used first column result Default \"Options\". add_percent_symbol Logical indicating whether add % sign percentages. Default TRUE. digits number digits round percentage responses (default 2).","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq_mrq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Frequency table for multiple response questions — dta_freq_mrq","text":"data frame containing frequency counts, percentage responses, total values. columns : Options different response options multiple response question Frequency count response option Responses percentage response option relative total count Cases percentage category specified value","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_freq_mrq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Frequency table for multiple response questions — dta_freq_mrq","text":"","code":"data(\"data_sample\")  # An example with multiple response variables labelled # as Yes / No  result <- dta_freq_mrq(   dat = data_sample,   .columns = r:excel,   value = \"Yes\",   name = \"Programming proficiency\" ) dta_gtable(result)     Programming proficiency       Frequency       Responses       Cases     R 1245 16.79% 49.80%Python 1267 17.09% 50.68%SAS 1266 17.08% 50.64%Stata 1225 16.53% 49.00%SPSS 1222 16.48% 48.88%Microsoft Excel 1188 16.03% 47.52%Total 7413 100.00% 296.52% # Remove the percentage symbol  result2 <- dta_freq_mrq(   dat = data_sample,   .columns = r:excel,   value = \"Yes\",   name = \"Programming proficiency\",   add_percent_symbol = FALSE ) dta_gtable(result2)     Programming proficiency       Frequency       Responses       Cases     R 1245 16.79 49.80Python 1267 17.09 50.68SAS 1266 17.08 50.64Stata 1225 16.53 49.00SPSS 1222 16.48 48.88Microsoft Excel 1188 16.03 47.52Total 7413 100.00 296.52 # An example with TRUE / FALSE. First generate multiple # response variables with TRUE / FALSE values  dat <- dta_mrq(   dat = data_sample,   .column = gadgets_owned,   delimeter = \", \",   prefix = \"gad_\" ) dta_gtable(dat[1:10, (ncol(dat) - 6):ncol(dat)])     Smart TV       Tablet       Desktop Computer       Digital Camera       Smartphone       Smartwatch       Laptop     TRUE TRUE TRUE TRUE TRUE FALSE FALSETRUE FALSE FALSE FALSE TRUE FALSE FALSETRUE TRUE TRUE FALSE FALSE TRUE TRUETRUE TRUE TRUE TRUE TRUE FALSE FALSEFALSE FALSE TRUE FALSE FALSE TRUE FALSEFALSE TRUE TRUE FALSE FALSE TRUE FALSEFALSE FALSE FALSE TRUE FALSE TRUE FALSEFALSE FALSE FALSE TRUE FALSE TRUE FALSEFALSE TRUE FALSE TRUE FALSE TRUE FALSEFALSE FALSE TRUE FALSE TRUE FALSE FALSE result3 <- dta_freq_mrq(   dat = dat,   .columns = starts_with(\"gad_\"),   value = TRUE,   name = \"Programming proficiency\" ) dta_gtable(result3)     Programming proficiency       Frequency       Responses       Cases     Smart TV 1087 14.46% 43.48%Tablet 1099 14.62% 43.96%Desktop Computer 1061 14.11% 42.44%Digital Camera 1034 13.75% 41.36%Smartphone 1029 13.69% 41.16%Smartwatch 1091 14.51% 43.64%Laptop 1117 14.86% 44.68%Total 7518 100.00% 300.72% # An example with numeric codes 0 / 1  dat2 <- dta_mrq(   dat = data_sample,   .column = gadgets_owned,   delimeter = \", \",   prefix = \"gad_\",   as_numeric = TRUE ) dta_gtable(dat2[1:10, (ncol(dat2) - 6):ncol(dat2)])     Smart TV       Tablet       Desktop Computer       Digital Camera       Smartphone       Smartwatch       Laptop     1 1 1 1 1 0 01 0 0 0 1 0 01 1 1 0 0 1 11 1 1 1 1 0 00 0 1 0 0 1 00 1 1 0 0 1 00 0 0 1 0 1 00 0 0 1 0 1 00 1 0 1 0 1 00 0 1 0 1 0 0 result4 <- dta_freq_mrq(   dat = dat2,   .columns = starts_with(\"gad_\"),   value = 1,   name = \"Programming proficiency\" ) dta_gtable(result4)     Programming proficiency       Frequency       Responses       Cases     Smart TV 1087 14.46% 43.48%Tablet 1099 14.62% 43.96%Desktop Computer 1061 14.11% 42.44%Digital Camera 1034 13.75% 41.36%Smartphone 1029 13.69% 41.16%Smartwatch 1091 14.51% 43.64%Laptop 1117 14.86% 44.68%Total 7518 100.00% 300.72%"},{"path":"https://stemxresearch.github.io/dta/reference/dta_get_datasets.html","id":null,"dir":"Reference","previous_headings":"","what":"Export the sample datasets to file — dta_get_datasets","title":"Export the sample datasets to file — dta_get_datasets","text":"dta_get_datasets() copies dataset code installation specified file path. path provided, saves file dta-data.xlsx current working directory.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_get_datasets.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Export the sample datasets to file — dta_get_datasets","text":"","code":"dta_get_datasets(copy_to_file_path = NULL)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_get_datasets.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Export the sample datasets to file — dta_get_datasets","text":"copy_to_file_path string specifying file path dataset copied. NULL (default), dataset copied dta-data.xlsx current working directory.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_get_datasets.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Export the sample datasets to file — dta_get_datasets","text":"function return value. prints success message operation successful throws error fails.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_get_datasets.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Export the sample datasets to file — dta_get_datasets","text":"function uses file.copy() copy file specified dta_path() destination path. destination path can provided argument, defaults dta-data.xlsx current working directory.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_get_datasets.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Export the sample datasets to file — dta_get_datasets","text":"","code":"# Copy to the default location # dta_get_datasets()"},{"path":"https://stemxresearch.github.io/dta/reference/dta_gt.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a styled gt table — dta_gt","title":"Create a styled gt table — dta_gt","text":"dta_gtable() creates gt table input data frame applies consistent styling vertical borders, bold column labels, reduced padding, customized background colors.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_gt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a styled gt table — dta_gt","text":"","code":"dta_gt(dat)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_gt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a styled gt table — dta_gt","text":"dat data frame want render style gt table.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_gt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a styled gt table — dta_gt","text":"styled gt table object.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_gt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a styled gt table — dta_gt","text":"","code":"data(\"women\") dta_gt(women)     height       weight     58 11559 11760 12061 12362 12663 12964 13265 13566 13967 14268 14669 15070 15471 15972 164 data(\"mtcars\") dta_gt(head(mtcars, n = 10))     mpg       cyl       disp       hp       drat       wt       qsec       vs       am       gear       carb     21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 421.0 6 160.0 110 3.90 2.875 17.02 0 1 4 422.8 4 108.0 93 3.85 2.320 18.61 1 1 4 121.4 6 258.0 110 3.08 3.215 19.44 1 0 3 118.7 8 360.0 175 3.15 3.440 17.02 0 0 3 218.1 6 225.0 105 2.76 3.460 20.22 1 0 3 114.3 8 360.0 245 3.21 3.570 15.84 0 0 3 424.4 4 146.7 62 3.69 3.190 20.00 1 0 4 222.8 4 140.8 95 3.92 3.150 22.90 1 0 4 219.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4"},{"path":"https://stemxresearch.github.io/dta/reference/dta_gtable.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a styled gt table — dta_gtable","title":"Create a styled gt table — dta_gtable","text":"dta_gtable() creates gt table input data frame applies consistent styling vertical borders, bold column labels, reduced padding, customized background colors.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_gtable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a styled gt table — dta_gtable","text":"","code":"dta_gtable(dat)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_gtable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a styled gt table — dta_gtable","text":"dat data frame want render style gt table.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_gtable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a styled gt table — dta_gtable","text":"styled gt table object.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_gtable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a styled gt table — dta_gtable","text":"","code":"data(\"women\") dta_gtable(women)     height       weight     58 11559 11760 12061 12362 12663 12964 13265 13566 13967 14268 14669 15070 15471 15972 164 data(\"mtcars\") dta_gtable(head(mtcars, n = 10))     mpg       cyl       disp       hp       drat       wt       qsec       vs       am       gear       carb     21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 421.0 6 160.0 110 3.90 2.875 17.02 0 1 4 422.8 4 108.0 93 3.85 2.320 18.61 1 1 4 121.4 6 258.0 110 3.08 3.215 19.44 1 0 3 118.7 8 360.0 175 3.15 3.440 17.02 0 0 3 218.1 6 225.0 105 2.76 3.460 20.22 1 0 3 114.3 8 360.0 245 3.21 3.570 15.84 0 0 3 424.4 4 146.7 62 3.69 3.190 20.00 1 0 4 222.8 4 140.8 95 3.92 3.150 22.90 1 0 4 219.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4"},{"path":"https://stemxresearch.github.io/dta/reference/dta_label.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign variable labels to data frame or tibble columns — dta_label","title":"Assign variable labels to data frame or tibble columns — dta_label","text":"dta_label() assigns variable labels columns data frame tibble. either takes dictionary containing names labels takes vectors names labels directly. function ensures labels applied correctly handles missing empty label names gracefully.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_label.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign variable labels to data frame or tibble columns — dta_label","text":"","code":"dta_label(dat, dict, .names, .labels)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_label.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign variable labels to data frame or tibble columns — dta_label","text":"dat data frame tibble labels applied. dict data frame tibble (optional) containing two columns representing variable names corresponding labels. NULL, labels generated .names .labels arguments. .names character vector variable names. required dict provided. .labels character vector variable labels corresponding .names. required dict provided.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_label.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign variable labels to data frame or tibble columns — dta_label","text":"tibble structure input dat, variable labels applied columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_label.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assign variable labels to data frame or tibble columns — dta_label","text":"dict provided, contain least two columns: define mapping variable names labels. dict provided, function directly use .names .labels arguments assign labels variables. .names vector missing missing entries, function attempt use column names dat object. length .names number columns dat match, error raised.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_label.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assign variable labels to data frame or tibble columns — dta_label","text":"","code":"# Using named vectors for labels  dat <- data.frame(   age = c(25, 30, 35, 40),   gender = c(\"Male\", \"Female\", \"Female\", \"Male\"),   income = c(50000, 60000, 55000, 65000) )  names <- c(\"age\", \"income\") labels <- c(\"Age in years\", \"Annual income\")  result <- dta_label(   dat, dict = NULL, .names = names, .labels = labels )  dta_gtable(result)     Age in years       gender       Annual income     25 Male 5000030 Female 6000035 Female 5500040 Male 65000 # Using a dictionary data frame  data(\"data_bmi\") dta_gtable(head(data_bmi))     id       age       height       weight     STM/4921 50 1.64 59STM/4396 34 1.98 57STM/7908 50 1.95 84STM/7243 39 1.52 63STM/4801 52 1.69 65STM/5134 50 1.71 73 data(\"dict_labels\") dta_gtable(dict_labels)     names       labels     age Age in yearsheight Height in metersweight Weight in kilograms result2 <- dta_label(   dat = data_bmi,   dict = dict_labels,   .names = names,   .labels = labels )  # Proving only the `.labels` argument will rename all # variables in \\code{dat}. In such a case, the length of # `.names` must be equal to the number of columns in # \\code{dat}.  labels <- c(\"Unique identifier\", dict_labels$labels) result3 <- dta_label(   data_bmi, dict = NULL, .names = NULL, .labels = labels )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_mrq.html","id":null,"dir":"Reference","previous_headings":"","what":"Split multiple response question column into binary columns — dta_mrq","title":"Split multiple response question column into binary columns — dta_mrq","text":"dta_mrq() splits specified column data frame contains multiple responses multiple binary columns. binary column represents whether given response option exists original data. also allows custom labeling new columns, options numeric conversion clean column names.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_mrq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split multiple response question column into binary columns — dta_mrq","text":"","code":"dta_mrq(   dat,   .column,   delimeter,   prefix = NULL,   as_numeric = FALSE,   labels = c(TRUE, FALSE),   is_clean_names = TRUE )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_mrq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split multiple response question column into binary columns — dta_mrq","text":"dat data frame containing column split. .column name column split. delimeter string representing delimiter used separate different responses original column. prefix string added prefix newly created column names. Default NULL, means prefix added. as_numeric Logical. TRUE, new columns converted numeric (1 TRUE, 0 FALSE). Default FALSE. labels vector length 2 specifying labels TRUE FALSE values binary columns. Default c(TRUE, FALSE). is_clean_names Logical. TRUE, janitor::clean_names() used standardize column names (e.g., convert lowercase replace spaces underscores). Default TRUE.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_mrq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Split multiple response question column into binary columns — dta_mrq","text":"data frame new binary columns added. new columns represent unique responses found original column, option clean column names.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_mrq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Split multiple response question column into binary columns — dta_mrq","text":"function typically used dealing survey data multiple options may selected given question, want split options individual binary columns indicating presence absence option.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_mrq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Split multiple response question column into binary columns — dta_mrq","text":"","code":"data(\"data_gadgets\") dat <- data_gadgets dta_gtable(dat)     gadgets_owned     Smartwatch, Tablet, SmartphoneTablet, Smartwatch, Smart TV, Desktop ComputerSmartphoneLaptop, TabletTablet, Smart TV, Digital Camera, LaptopLaptop, Desktop Computer, Digital Camera, Smart TV, SmartphoneDigital Camera, Smartphone, Desktop Computer, SmartwatchSmartwatch, Smart TV, Laptop, SmartphoneDesktop ComputerSmartphone, Laptop, Smart TV, SmartwatchTabletDigital Camera, Tablet, Desktop ComputerDigital Camera, Desktop Computer, Smart TV, Smartwatch, LaptopTablet, Desktop Computer, Smart TVDigital Camera, Desktop Computer, Smart TV, Smartphone, Laptop # Split `gadgets_owned` column into separate columns. # The created columns will be logical (i.e. TRUE / FALSE).  df <- dta_mrq(  dat = dat,  .column = gadgets_owned,  delimeter = \", \",  is_clean_names = TRUE) dta_gtable(df)     gadgets_owned       Smartwatch       Tablet       Smartphone       Smart TV       Desktop Computer       Laptop       Digital Camera     Smartwatch, Tablet, Smartphone TRUE TRUE TRUE FALSE FALSE FALSE FALSETablet, Smartwatch, Smart TV, Desktop Computer TRUE TRUE FALSE TRUE TRUE FALSE FALSESmartphone FALSE FALSE TRUE FALSE FALSE FALSE FALSELaptop, Tablet FALSE TRUE FALSE FALSE FALSE TRUE FALSETablet, Smart TV, Digital Camera, Laptop FALSE TRUE FALSE TRUE FALSE TRUE TRUELaptop, Desktop Computer, Digital Camera, Smart TV, Smartphone FALSE FALSE TRUE TRUE TRUE TRUE TRUEDigital Camera, Smartphone, Desktop Computer, Smartwatch TRUE FALSE TRUE FALSE TRUE FALSE TRUESmartwatch, Smart TV, Laptop, Smartphone TRUE FALSE TRUE TRUE FALSE TRUE FALSEDesktop Computer FALSE FALSE FALSE FALSE TRUE FALSE FALSESmartphone, Laptop, Smart TV, Smartwatch TRUE FALSE TRUE TRUE FALSE TRUE FALSETablet FALSE TRUE FALSE FALSE FALSE FALSE FALSEDigital Camera, Tablet, Desktop Computer FALSE TRUE FALSE FALSE TRUE FALSE TRUEDigital Camera, Desktop Computer, Smart TV, Smartwatch, Laptop TRUE FALSE FALSE TRUE TRUE TRUE TRUETablet, Desktop Computer, Smart TV FALSE TRUE FALSE TRUE TRUE FALSE FALSEDigital Camera, Desktop Computer, Smart TV, Smartphone, Laptop FALSE FALSE TRUE TRUE TRUE TRUE TRUE # Convert the created columns from logical (TRUE / FALSE) # columns to numeric.  df2 <- dta_mrq(  dat = dat,  .column = gadgets_owned,  delimeter = \", \",  as_numeric = TRUE,  is_clean_names = TRUE ) dta_gtable(df2)     gadgets_owned       Smartwatch       Tablet       Smartphone       Smart TV       Desktop Computer       Laptop       Digital Camera     Smartwatch, Tablet, Smartphone 1 1 1 0 0 0 0Tablet, Smartwatch, Smart TV, Desktop Computer 1 1 0 1 1 0 0Smartphone 0 0 1 0 0 0 0Laptop, Tablet 0 1 0 0 0 1 0Tablet, Smart TV, Digital Camera, Laptop 0 1 0 1 0 1 1Laptop, Desktop Computer, Digital Camera, Smart TV, Smartphone 0 0 1 1 1 1 1Digital Camera, Smartphone, Desktop Computer, Smartwatch 1 0 1 0 1 0 1Smartwatch, Smart TV, Laptop, Smartphone 1 0 1 1 0 1 0Desktop Computer 0 0 0 0 1 0 0Smartphone, Laptop, Smart TV, Smartwatch 1 0 1 1 0 1 0Tablet 0 1 0 0 0 0 0Digital Camera, Tablet, Desktop Computer 0 1 0 0 1 0 1Digital Camera, Desktop Computer, Smart TV, Smartwatch, Laptop 1 0 0 1 1 1 1Tablet, Desktop Computer, Smart TV 0 1 0 1 1 0 0Digital Camera, Desktop Computer, Smart TV, Smartphone, Laptop 0 0 1 1 1 1 1 # You can specify the labels to be used. In the example # below, the columns will be character with Yes / No.  df3 <- dta_mrq(  dat = dat,  .column = gadgets_owned,  delimeter = \", \",  labels = c(\"Yes\", \"No\"),  is_clean_names = TRUE, ) dta_gtable(df3)     gadgets_owned       Smartwatch       Tablet       Smartphone       Smart TV       Desktop Computer       Laptop       Digital Camera     Smartwatch, Tablet, Smartphone Yes Yes Yes No No No NoTablet, Smartwatch, Smart TV, Desktop Computer Yes Yes No Yes Yes No NoSmartphone No No Yes No No No NoLaptop, Tablet No Yes No No No Yes NoTablet, Smart TV, Digital Camera, Laptop No Yes No Yes No Yes YesLaptop, Desktop Computer, Digital Camera, Smart TV, Smartphone No No Yes Yes Yes Yes YesDigital Camera, Smartphone, Desktop Computer, Smartwatch Yes No Yes No Yes No YesSmartwatch, Smart TV, Laptop, Smartphone Yes No Yes Yes No Yes NoDesktop Computer No No No No Yes No NoSmartphone, Laptop, Smart TV, Smartwatch Yes No Yes Yes No Yes NoTablet No Yes No No No No NoDigital Camera, Tablet, Desktop Computer No Yes No No Yes No YesDigital Camera, Desktop Computer, Smart TV, Smartwatch, Laptop Yes No No Yes Yes Yes YesTablet, Desktop Computer, Smart TV No Yes No Yes Yes No NoDigital Camera, Desktop Computer, Smart TV, Smartphone, Laptop No No Yes Yes Yes Yes Yes # Any other labels could be used. For example # Positive / Negative e.g. in the case of diseases.  df4 <- dta_mrq(  dat = dat,  .column = gadgets_owned,  delimeter = \", \",  labels = c(\"Positive\", \"Negative\"),  is_clean_names = TRUE, ) dta_gtable(df4)     gadgets_owned       Smartwatch       Tablet       Smartphone       Smart TV       Desktop Computer       Laptop       Digital Camera     Smartwatch, Tablet, Smartphone Positive Positive Positive Negative Negative Negative NegativeTablet, Smartwatch, Smart TV, Desktop Computer Positive Positive Negative Positive Positive Negative NegativeSmartphone Negative Negative Positive Negative Negative Negative NegativeLaptop, Tablet Negative Positive Negative Negative Negative Positive NegativeTablet, Smart TV, Digital Camera, Laptop Negative Positive Negative Positive Negative Positive PositiveLaptop, Desktop Computer, Digital Camera, Smart TV, Smartphone Negative Negative Positive Positive Positive Positive PositiveDigital Camera, Smartphone, Desktop Computer, Smartwatch Positive Negative Positive Negative Positive Negative PositiveSmartwatch, Smart TV, Laptop, Smartphone Positive Negative Positive Positive Negative Positive NegativeDesktop Computer Negative Negative Negative Negative Positive Negative NegativeSmartphone, Laptop, Smart TV, Smartwatch Positive Negative Positive Positive Negative Positive NegativeTablet Negative Positive Negative Negative Negative Negative NegativeDigital Camera, Tablet, Desktop Computer Negative Positive Negative Negative Positive Negative PositiveDigital Camera, Desktop Computer, Smart TV, Smartwatch, Laptop Positive Negative Negative Positive Positive Positive PositiveTablet, Desktop Computer, Smart TV Negative Positive Negative Positive Positive Negative NegativeDigital Camera, Desktop Computer, Smart TV, Smartphone, Laptop Negative Negative Positive Positive Positive Positive Positive # Use numeric values and specify a `prefix` for the # column names.  df5 <- dta_mrq(  dat = dat,  .column = gadgets_owned,  delimeter = \", \",  prefix = \"gad_\",  labels = c(1, 2),  is_clean_names = TRUE ) dta_gtable(df5)     gadgets_owned       Smartwatch       Tablet       Smartphone       Smart TV       Desktop Computer       Laptop       Digital Camera     Smartwatch, Tablet, Smartphone 1 1 1 2 2 2 2Tablet, Smartwatch, Smart TV, Desktop Computer 1 1 2 1 1 2 2Smartphone 2 2 1 2 2 2 2Laptop, Tablet 2 1 2 2 2 1 2Tablet, Smart TV, Digital Camera, Laptop 2 1 2 1 2 1 1Laptop, Desktop Computer, Digital Camera, Smart TV, Smartphone 2 2 1 1 1 1 1Digital Camera, Smartphone, Desktop Computer, Smartwatch 1 2 1 2 1 2 1Smartwatch, Smart TV, Laptop, Smartphone 1 2 1 1 2 1 2Desktop Computer 2 2 2 2 1 2 2Smartphone, Laptop, Smart TV, Smartwatch 1 2 1 1 2 1 2Tablet 2 1 2 2 2 2 2Digital Camera, Tablet, Desktop Computer 2 1 2 2 1 2 1Digital Camera, Desktop Computer, Smart TV, Smartwatch, Laptop 1 2 2 1 1 1 1Tablet, Desktop Computer, Smart TV 2 1 2 1 1 2 2Digital Camera, Desktop Computer, Smart TV, Smartphone, Laptop 2 2 1 1 1 1 1"},{"path":"https://stemxresearch.github.io/dta/reference/dta_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the path to the example dataset — dta_path","title":"Get the path to the example dataset — dta_path","text":"dta_path() provides file path example dataset dta-data.xlsx included package. dataset located extdata directory package.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the path to the example dataset — dta_path","text":"","code":"dta_path()"},{"path":"https://stemxresearch.github.io/dta/reference/dta_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the path to the example dataset — dta_path","text":"string containing full file path dataset within package. file exist, returns empty string.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_path.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get the path to the example dataset — dta_path","text":"function uses system.file construct path extdata/dta-data.xlsx file included package. useful accessing built-example files.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the path to the example dataset — dta_path","text":"","code":"# Get the file path to the dataset # dta_path()"},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode variables in a data frame based on a dictionary — dta_recode","title":"Recode variables in a data frame based on a dictionary — dta_recode","text":"dta_recode() recodes variables dat using dictionary dict. dictionary maps original values variable new values labels.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode variables in a data frame based on a dictionary — dta_recode","text":"","code":"dta_recode(   dat,   dict,   sheet = 1,   min_categories = 2,   max_categories = 25,   as_numeric = FALSE,   is_force_sequential = FALSE )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode variables in a data frame based on a dictionary — dta_recode","text":"dat data frame tibble containing variables recoded. dict data frame tibble serving dictionary, specifying variable names, values, labels. sheet name index worksheet contains data dictionary. min_categories Minimum number categories variable recoded. Defaults 1. max_categories Maximum number categories variable recoded. Defaults 25. as_numeric Logical. TRUE, recoded variables returned numeric. Defaults FALSE. is_force_sequential Logical indicating whether force sequential values, , start 1 increase 1.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode variables in a data frame based on a dictionary — dta_recode","text":"tibble recoded variables. warnings generated, saved CSV file displayed.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode variables in a data frame based on a dictionary — dta_recode","text":"","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union data(\"data_sample\") glimpse(data_sample) # look at the data type column #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <chr> \"Central\", \"Central\", \"South\", \"West\", \"North East\", \"N… #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <chr> \"50-59\", \"40-49\", \"40-49\", \"30-39\", \"40-49\", \"50-59\", \"… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <chr> \"AB\", \"B\", \"AB\", \"AB\", \"A\", \"A\", \"AB\", \"B\", \"A\", \"AB\", … #> $ marital_status <chr> \"Married\", \"Married\", \"Married\", \"Single\", \"Single\", \"M… #> $ education      <chr> \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Ba… #> $ employed       <chr> \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ ses            <chr> \"Middle\", \"Middle\", \"High\", \"Middle\", \"Low\", \"Middle\", … #> $ language       <chr> \"Mandarin\", \"French\", \"Arabic\", \"English\", \"Arabic\", \"M… #> $ phone          <chr> \"OnePlus\", \"OnePlus\", \"Samsung\", \"OnePlus\", \"OnePlus\", … #> $ transport      <chr> \"Bicycle\", \"Train\", \"Car\", \"Bus\", \"Bus\", \"Bus\", \"Bus\", … #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes… #> $ python         <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"N… #> $ sas            <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", … #> $ stata          <chr> \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ spss           <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\"… #> $ excel          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", …  data(\"dict_recode\") dta_gtable(dict_recode)     names       values       labels       is_ordered     region 1 Central 0 2 North East  3 South  4 West age_group 1 20-29 1 2 30-39  3 40-49  4 50-59  5 60-69  6 70+ blood_group 1 A 0 2 B  3 AB  4 O marital_status 1 Single 0 2 Married  3 Other education 1 Bachelors 1 2 Masters  3 Doctorate employed 0 No 0 1 Yes ses 1 Low 1 2 Middle  3 High language 1 English 0 2 French  3 Spanish  4 Arabic  5 Mandarin  6 Other phone 0 None 0 1 Samsung  2 Apple  3 Xiaomi  4 OnePlus  5 Google  6 Other transport 1 Walking 0 2 Bicycle  3 Car  4 Bus  5 Train r 0 No 0 1 Yes python 0 No 0 1 Yes sas 0 No 0 1 Yes stata 0 No 0 1 Yes spss 0 No 0 1 Yes excel 0 No 0 1 Yes  # The default nature of `dta_recode()` is to drop the # labels if the values are not sequential or do not # start at 1. To maintain these labels, set  # `is_force_sequential` to `TRUE`. Note that this will # reset the given values to sequential.  result2 <- dta_recode(   dat = data_sample,   dict = dict_recode,   is_force_sequential = TRUE ) glimpse(result2) #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <fct> Central, Central, South, West, North East, North East, … #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <ord> 50-59, 40-49, 40-49, 30-39, 40-49, 50-59, 50-59, 30-39,… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <fct> AB, B, AB, AB, A, A, AB, B, A, AB, AB, A, B, AB, A, B, … #> $ marital_status <fct> Married, Married, Married, Single, Single, Married, Sin… #> $ education      <ord> Bachelors, Bachelors, Bachelors, Bachelors, Bachelors, … #> $ employed       <fct> Yes, No, No, Yes, Yes, No, Yes, No, Yes, Yes, Yes, No, … #> $ ses            <ord> Middle, Middle, High, Middle, Low, Middle, Low, Low, Mi… #> $ language       <fct> Mandarin, French, Arabic, English, Arabic, Mandarin, En… #> $ phone          <fct> OnePlus, OnePlus, Samsung, OnePlus, OnePlus, Samsung, O… #> $ transport      <fct> Bicycle, Train, Car, Bus, Bus, Bus, Bus, Train, Bicycle… #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <fct> No, No, No, No, No, Yes, Yes, Yes, Yes, Yes, Yes, No, N… #> $ python         <fct> No, Yes, Yes, Yes, No, Yes, Yes, No, No, No, Yes, Yes, … #> $ sas            <fct> No, No, No, No, No, No, No, No, Yes, No, No, No, No, No… #> $ stata          <fct> No, No, Yes, Yes, Yes, No, Yes, No, Yes, No, Yes, Yes, … #> $ spss           <fct> No, No, Yes, No, Yes, No, No, Yes, No, Yes, No, Yes, No… #> $ excel          <fct> Yes, No, No, No, No, No, No, No, No, No, No, No, Yes, N…  # Return numeric codes  result3 <- dta_recode(   dat = data_sample,   dict = dict_recode,   as_numeric = TRUE ) glimpse(result3) # look at the data type column and values #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <dbl> 1, 1, 3, 4, 2, 2, 1, 2, 1, 3, 2, 2, 3, 2, 2, 4, 3, 3, 3… #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <dbl> 4, 3, 3, 2, 3, 4, 4, 2, 4, 2, 3, 3, 1, 2, 3, 5, 5, 2, 1… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <dbl> 3, 2, 3, 3, 1, 1, 3, 2, 1, 3, 3, 1, 2, 3, 1, 2, 3, 3, 3… #> $ marital_status <dbl> 2, 2, 2, 1, 1, 2, 1, 1, 3, 2, 2, 1, 2, 1, 1, 1, 2, 2, 2… #> $ education      <dbl> 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 3, 2, 1… #> $ employed       <dbl> 2, 1, 1, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 2, 1, 2… #> $ ses            <dbl> 2, 2, 3, 2, 1, 2, 1, 1, 2, 1, 2, 1, 3, 3, 1, 2, 1, 1, 1… #> $ language       <dbl> 5, 2, 4, 1, 4, 5, 1, 5, 5, 3, 4, 1, 3, 4, 4, 3, 3, 4, 3… #> $ phone          <dbl> 5, 5, 2, 5, 5, 2, 5, 5, 6, 6, 4, 4, 2, 4, 4, 4, 4, 3, 7… #> $ transport      <dbl> 2, 5, 3, 4, 4, 4, 4, 5, 2, 1, 2, 3, 2, 1, 5, 3, 4, 3, 3… #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <dbl> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2… #> $ python         <dbl> 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1… #> $ sas            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1… #> $ stata          <dbl> 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1… #> $ spss           <dbl> 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1… #> $ excel          <dbl> 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1…"},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_auto.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically recode categorical variables in a data frame — dta_recode_auto","title":"Automatically recode categorical variables in a data frame — dta_recode_auto","text":"dta_recode_auto() automatically recodes categorical variables data frame tibble. , assigns numerical codes starting 1 increasing 1 (.e. 1, 2, 3, 4, ...) labels (categories) according alphabetic order.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_auto.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically recode categorical variables in a data frame — dta_recode_auto","text":"","code":"dta_recode_auto(   dat,   .columns = names(dat),   min_categories = 2,   max_categories = 25,   is_ordered = FALSE,   as_numeric = FALSE )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_auto.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically recode categorical variables in a data frame — dta_recode_auto","text":"dat data frame containing variables recoded. .columns character vector specifying columns recode. Default NULL, meaning applicable columns recoded. min_categories minimum number unique values consider recoding happen. Default 2. max_categories maximum number unique values consider afor recoding happen. Default 25. is_ordered Logical. TRUE, creates ordered factor. Default FALSE. as_numeric Logical. TRUE, converts result recoding numeric, otherwise, keeps factors. Default FALSE.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_auto.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically recode categorical variables in a data frame — dta_recode_auto","text":"data frame recoded categorical variables.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_auto.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Automatically recode categorical variables in a data frame — dta_recode_auto","text":"function automatically recodes categorical variables data frame number unique values min_categories max_categories. assigns numeric code unique category based alphabetical order. instance, column represents variable Gender categories Female Male, function assigns 1 Female 2 Male. recoding done using factor function, levels factor ordered alphabetically, converted numeric values. ensures recoding consistent follows lexicographical order categorical variables.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_auto.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Automatically recode categorical variables in a data frame — dta_recode_auto","text":"","code":"library(dplyr) data(\"data_sample\") glimpse(data_sample) # look at the data type column #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <chr> \"Central\", \"Central\", \"South\", \"West\", \"North East\", \"N… #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <chr> \"50-59\", \"40-49\", \"40-49\", \"30-39\", \"40-49\", \"50-59\", \"… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <chr> \"AB\", \"B\", \"AB\", \"AB\", \"A\", \"A\", \"AB\", \"B\", \"A\", \"AB\", … #> $ marital_status <chr> \"Married\", \"Married\", \"Married\", \"Single\", \"Single\", \"M… #> $ education      <chr> \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Ba… #> $ employed       <chr> \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ ses            <chr> \"Middle\", \"Middle\", \"High\", \"Middle\", \"Low\", \"Middle\", … #> $ language       <chr> \"Mandarin\", \"French\", \"Arabic\", \"English\", \"Arabic\", \"M… #> $ phone          <chr> \"OnePlus\", \"OnePlus\", \"Samsung\", \"OnePlus\", \"OnePlus\", … #> $ transport      <chr> \"Bicycle\", \"Train\", \"Car\", \"Bus\", \"Bus\", \"Bus\", \"Bus\", … #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes… #> $ python         <chr> \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"N… #> $ sas            <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", … #> $ stata          <chr> \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ spss           <chr> \"No\", \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\"… #> $ excel          <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", …  # Auto-recode all categorical variables  result <- dta_recode_auto(dat = data_sample) glimpse(result) # look at the data type column #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <fct> Central, Central, South, West, North East, North East, … #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <fct> 50-59, 40-49, 40-49, 30-39, 40-49, 50-59, 50-59, 30-39,… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <fct> AB, B, AB, AB, A, A, AB, B, A, AB, AB, A, B, AB, A, B, … #> $ marital_status <fct> Married, Married, Married, Single, Single, Married, Sin… #> $ education      <fct> Bachelors, Bachelors, Bachelors, Bachelors, Bachelors, … #> $ employed       <fct> Yes, No, No, Yes, Yes, No, Yes, No, Yes, Yes, Yes, No, … #> $ ses            <fct> Middle, Middle, High, Middle, Low, Middle, Low, Low, Mi… #> $ language       <fct> Mandarin, French, Arabic, English, Arabic, Mandarin, En… #> $ phone          <fct> OnePlus, OnePlus, Samsung, OnePlus, OnePlus, Samsung, O… #> $ transport      <fct> Bicycle, Train, Car, Bus, Bus, Bus, Bus, Train, Bicycle… #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <fct> No, No, No, No, No, Yes, Yes, Yes, Yes, Yes, Yes, No, N… #> $ python         <fct> No, Yes, Yes, Yes, No, Yes, Yes, No, No, No, Yes, Yes, … #> $ sas            <fct> No, No, No, No, No, No, No, No, Yes, No, No, No, No, No… #> $ stata          <fct> No, No, Yes, Yes, Yes, No, Yes, No, Yes, No, Yes, Yes, … #> $ spss           <fct> No, No, Yes, No, Yes, No, No, Yes, No, Yes, No, Yes, No… #> $ excel          <fct> Yes, No, No, No, No, No, No, No, No, No, No, No, Yes, N…  # Convert to numeric  result <- dta_recode_auto(   dat = data_sample, as_numeric = TRUE ) glimpse(result) # look at the data type and values columns #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <dbl> 1, 1, 2, 3, 4, 4, 1, 4, 1, 2, 4, 4, 2, 4, 4, 3, 2, 2, 2… #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <dbl> 1, 2, 2, 3, 2, 1, 1, 3, 1, 3, 2, 2, 4, 3, 2, 5, 5, 3, 4… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <dbl> 1, 2, 1, 1, 3, 3, 1, 2, 3, 1, 1, 3, 2, 1, 3, 2, 1, 1, 1… #> $ marital_status <dbl> 1, 1, 1, 2, 2, 1, 2, 2, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1… #> $ education      <dbl> 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 3, 2, 1… #> $ employed       <dbl> 1, 2, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 1, 2, 1… #> $ ses            <dbl> 1, 1, 2, 1, 3, 1, 3, 3, 1, 3, 1, 3, 2, 2, 3, 1, 3, 3, 3… #> $ language       <dbl> 1, 2, 3, 4, 3, 1, 4, 1, 1, 5, 3, 4, 5, 3, 3, 5, 5, 3, 5… #> $ phone          <dbl> 1, 1, 2, 1, 1, 2, 1, 1, 3, 3, 4, 4, 2, 4, 4, 4, 4, 5, 6… #> $ transport      <dbl> 1, 2, 3, 4, 4, 4, 4, 2, 1, 5, 1, 3, 1, 5, 2, 3, 4, 3, 3… #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <dbl> 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 2, 1, 1, 2… #> $ python         <dbl> 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 1… #> $ sas            <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1… #> $ stata          <dbl> 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 1, 2, 1… #> $ spss           <dbl> 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1… #> $ excel          <dbl> 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2…  # Specify the columns using the `.columns` argument  result2 <- dta_recode_auto(   dat = data_sample, .columns = r:excel ) glimpse(result2) # only the variables `r` through `excel` will be recoded #> Rows: 2,500 #> Columns: 21 #> $ id             <chr> \"STM/7539\", \"STM/7993\", \"STM/7387\", \"STM/5598\", \"STM/59… #> $ region         <chr> \"Central\", \"Central\", \"South\", \"West\", \"North East\", \"N… #> $ age            <dbl> 56, 46, 45, 37, 45, 51, 56, 37, 50, 38, 48, 41, 24, 34,… #> $ age_group      <chr> \"50-59\", \"40-49\", \"40-49\", \"30-39\", \"40-49\", \"50-59\", \"… #> $ height         <dbl> 1.70, 1.57, 1.47, 1.67, 1.69, 1.90, 1.85, 1.64, 1.61, 1… #> $ weight         <dbl> 73, 53, 85, 77, 53, 75, 69, 53, 56, 89, 73, 86, 76, 81,… #> $ blood_group    <chr> \"AB\", \"B\", \"AB\", \"AB\", \"A\", \"A\", \"AB\", \"B\", \"A\", \"AB\", … #> $ marital_status <chr> \"Married\", \"Married\", \"Married\", \"Single\", \"Single\", \"M… #> $ education      <chr> \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Bachelors\", \"Ba… #> $ employed       <chr> \"Yes\", \"No\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", \"No\", \"Ye… #> $ ses            <chr> \"Middle\", \"Middle\", \"High\", \"Middle\", \"Low\", \"Middle\", … #> $ language       <chr> \"Mandarin\", \"French\", \"Arabic\", \"English\", \"Arabic\", \"M… #> $ phone          <chr> \"OnePlus\", \"OnePlus\", \"Samsung\", \"OnePlus\", \"OnePlus\", … #> $ transport      <chr> \"Bicycle\", \"Train\", \"Car\", \"Bus\", \"Bus\", \"Bus\", \"Bus\", … #> $ gadgets_owned  <chr> \"Smart TV, Tablet, Desktop Computer, Digital Camera, Sm… #> $ r              <fct> No, No, No, No, No, Yes, Yes, Yes, Yes, Yes, Yes, No, N… #> $ python         <fct> No, Yes, Yes, Yes, No, Yes, Yes, No, No, No, Yes, Yes, … #> $ sas            <fct> No, No, No, No, No, No, No, No, Yes, No, No, No, No, No… #> $ stata          <fct> No, No, Yes, Yes, Yes, No, Yes, No, Yes, No, Yes, Yes, … #> $ spss           <fct> No, No, Yes, No, Yes, No, No, Yes, No, Yes, No, Yes, No… #> $ excel          <fct> Yes, No, No, No, No, No, No, No, No, No, No, No, Yes, N…"},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":null,"dir":"Reference","previous_headings":"","what":"Recode columns using common labels — dta_recode_common_labels","title":"Recode columns using common labels — dta_recode_common_labels","text":"dta_recode_common_labels() recodes specified columns data frame apply consistent labels values. supports numeric factor conversion handles predefined label categories.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Recode columns using common labels — dta_recode_common_labels","text":"","code":"dta_recode_common_labels(   dat,   .columns,   labels = c(\"No\", \"Yes\"),   values = NULL,   is_reverse = FALSE,   is_ordered = NULL,   as_numeric = FALSE,   is_force_sequential = FALSE )"},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Recode columns using common labels — dta_recode_common_labels","text":"dat data frame containing columns recoded. .columns tidy selection columns recode. labels vector labels assign recoded values. Alternatively, single character string (e.g., \"yn1\", \"l1\", etc.) predefined label categories. values numeric vector values corresponding labels. NULL, defaults sequential integers starting 1. is_reverse Logical, whether reverse order values. Default FALSE. is_ordered Logical, whether recoded variables ordered factors. Can single value vector corresponding selected columns. Defaults NULL (treated FALSE columns). as_numeric Logical, whether return recoded columns numeric values rather factors. Default FALSE. is_force_sequential Logical indicating whether force sequential values, , start 1 increase 1.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Recode columns using common labels — dta_recode_common_labels","text":"modified tibble recoded columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Recode columns using common labels — dta_recode_common_labels","text":"function allows flexible recoding specifying custom predefined labels. labels predefined category (e.g., yesno1 , Yes/) expanded automatically using dta_categories() function returns following.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"yes-no-categories","dir":"Reference","previous_headings":"","what":"Yes/No Categories","title":"Recode columns using common labels — dta_recode_common_labels","text":"yesno1 c(\"\", \"Yes\") yesno2 c(\"\", \"Yes\", \"know\") yesno3 c(\"\", \"Yes\", \"Prefer say\") yesno4 c(\"\", \"Yes\", \"know\", \"Prefer say\")","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"likert-scale-categories","dir":"Reference","previous_headings":"","what":"Likert Scale Categories","title":"Recode columns using common labels — dta_recode_common_labels","text":"likert1 c(\"Strong disagree\", \"Disagree\", \"Neutral\", \"Agree\", \"Strongly agree\") likert2 c(\"Strong disagree\", \"Disagree\", \"Undecided\", \"Agree\", \"Strongly agree\") likert3 c(\"Strong dissatisfied\", \"Dissatisfied\", \"Neutral\", \"Satisfied\", \"Strongly satisfied\") likert4 c(\"Strong dissatisfied\", \"Dissatisfied\", \"Undecided\", \"Satisfied\", \"Strongly satisfied\") likert5 c(\"ineffective\", \"Ineffective\", \"Neutral\", \"Effective\", \"effective\") likert6 c(\"ineffective\", \"Ineffective\", \"Undecided\", \"Effective\", \"effective\") categories can used quick references consistent label recoding.","code":""},{"path":[]},{"path":"https://stemxresearch.github.io/dta/reference/dta_recode_common_labels.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Recode columns using common labels — dta_recode_common_labels","text":"","code":"library(dplyr) data(\"data_sample\") dat <- data_sample[1:15, 16:21]  # Apply the values 1 / 2 to the labels No / Yes  result <- dta_recode_common_labels(   dat, .columns = python:spss, labels = c(\"No\", \"Yes\") ) glimpse(result) # look at data type and values columns #> Rows: 15 #> Columns: 6 #> $ r      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\"… #> $ python <fct> No, Yes, Yes, Yes, No, Yes, Yes, No, No, No, Yes, Yes, No, Yes,… #> $ sas    <fct> No, No, No, No, No, No, No, No, Yes, No, No, No, No, No, No #> $ stata  <fct> No, No, Yes, Yes, Yes, No, Yes, No, Yes, No, Yes, Yes, Yes, No,… #> $ spss   <fct> No, No, Yes, No, Yes, No, No, Yes, No, Yes, No, Yes, No, Yes, No #> $ excel  <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N…  # Add `as_numeric = TRUE` to return numeric # values instead of factor  result2 <- dta_recode_common_labels(   dat,   .columns = python:spss,   labels = c(\"No\", \"Yes\"),   as_numeric = TRUE ) glimpse(result2) # look at data type and values columns #> Rows: 15 #> Columns: 6 #> $ r      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\"… #> $ python <int> 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1 #> $ sas    <int> 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1 #> $ stata  <int> 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2 #> $ spss   <int> 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1 #> $ excel  <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N…  # Use predefined label category `yesno1` which will # assign 1 = No and 2 = Yes  result3 <- dta_recode_common_labels(   dat,   .columns = python:spss,   labels = \"yesno1\",   as_numeric = TRUE ) glimpse(result3) # look at data type and values columns #> Rows: 15 #> Columns: 6 #> $ r      <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"Yes\", \"Yes\", \"Yes\", \"Yes\", \"Yes\"… #> $ python <int> 1, 2, 2, 2, 1, 2, 2, 1, 1, 1, 2, 2, 1, 2, 1 #> $ sas    <int> 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1 #> $ stata  <int> 1, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2 #> $ spss   <int> 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1 #> $ excel  <chr> \"Yes\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"N…  # ======================================================  data(\"data_phone\") glimpse(data_phone) #> Rows: 15 #> Columns: 7 #> $ id                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 #> $ phone_type            <chr> \"OnePlus\", \"Sumsung\", \"OnePlus\", \"Google\", \"Sums… #> $ ease_of_use           <chr> \"Disagree\", \"Neutral\", \"Strongly Disagree\", \"Neu… #> $ battery_life          <chr> \"Strongly Disagree\", \"Strongly Agree\", \"Neutral\"… #> $ camera_quality        <chr> \"Strongly Agree\", \"Strongly Disagree\", \"Strongly… #> $ value_for_money       <chr> \"Agree\", \"Strongly Agree\", \"Strongly Disagree\", … #> $ design_and_appearance <chr> \"Strongly Agree\", \"Strongly Agree\", \"Disagree\", …  # Create the categories  mrq_options <- c(   \"Strongly Disagree\",   \"Disagree\",   \"Neutral\",   \"Agree\",   \"Strongly Agree\" )  # Recode the columns `ease_of_use` to `design_and_appearance` # as follows:    # \"Strongly agree\" = 1,   # \"Disagree\" = 2,   # \"Neutral\" = 3,   # \"Agree\" = 4,   # \"Strongly agree\" = 5  result4 <- dta_recode_common_labels(   dat = data_phone,   .columns = ease_of_use:design_and_appearance,   labels = mrq_options,   is_ordered = TRUE ) glimpse(result4) # look at data type and values columns #> Rows: 15 #> Columns: 7 #> $ id                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 #> $ phone_type            <chr> \"OnePlus\", \"Sumsung\", \"OnePlus\", \"Google\", \"Sums… #> $ ease_of_use           <ord> Disagree, Neutral, Strongly Disagree, Neutral, D… #> $ battery_life          <ord> Strongly Disagree, Strongly Agree, Neutral, Agre… #> $ camera_quality        <ord> Strongly Agree, Strongly Disagree, Strongly Agre… #> $ value_for_money       <ord> Agree, Strongly Agree, Strongly Disagree, Neutra… #> $ design_and_appearance <ord> Strongly Agree, Strongly Agree, Disagree, Strong…  # To reverse the codes, that is,   # \"Strongly agree\" = 5,   # \"Disagree\" = 4,   # \"Neutral\" = 3,   # \"Agree\" = 2,   # \"Strongly agree\" = 1 # and return numeric values, use the following syntax  result5 <- dta_recode_common_labels(   dat = data_phone,   .columns = ease_of_use:design_and_appearance,   labels = mrq_options,   is_reverse = TRUE,   is_ordered = TRUE,   as_numeric = TRUE ) glimpse(result5) # look at data type and values columns #> Rows: 15 #> Columns: 7 #> $ id                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 #> $ phone_type            <chr> \"OnePlus\", \"Sumsung\", \"OnePlus\", \"Google\", \"Sums… #> $ ease_of_use           <int> 4, 3, 5, 3, 4, 2, 3, 4, 5, 3, 3, 1, 4, 4, 3 #> $ battery_life          <int> 5, 1, 3, 2, 4, 2, 4, 1, 2, 4, 2, 4, 4, 5, 3 #> $ camera_quality        <int> 1, 5, 1, 2, 2, 2, 2, 1, 4, 5, 5, 2, 1, 3, 3 #> $ value_for_money       <int> 2, 1, 5, 3, 4, 4, 1, 2, 1, 3, 1, 5, 5, 5, 3 #> $ design_and_appearance <int> 1, 1, 4, 5, 3, 1, 5, 1, 2, 2, 3, 4, 5, 2, 1  result6 <- dta_recode_common_labels(   dat = data_phone,   .columns = ease_of_use:design_and_appearance,   labels = mrq_options,   values = LETTERS[1:5],   is_ordered = TRUE,   is_reverse = FALSE ) glimpse(result6) # look at data type and values columns #> Rows: 15 #> Columns: 7 #> $ id                    <int> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 #> $ phone_type            <chr> \"OnePlus\", \"Sumsung\", \"OnePlus\", \"Google\", \"Sums… #> $ ease_of_use           <chr> \"B\", \"C\", \"A\", \"C\", \"B\", \"D\", \"C\", \"B\", \"A\", \"C\"… #> $ battery_life          <chr> \"A\", \"E\", \"C\", \"D\", \"B\", \"D\", \"B\", \"E\", \"D\", \"B\"… #> $ camera_quality        <chr> \"E\", \"A\", \"E\", \"D\", \"D\", \"D\", \"D\", \"E\", \"B\", \"A\"… #> $ value_for_money       <chr> \"D\", \"E\", \"A\", \"C\", \"B\", \"B\", \"E\", \"D\", \"E\", \"C\"… #> $ design_and_appearance <chr> \"E\", \"E\", \"B\", \"A\", \"C\", \"E\", \"A\", \"E\", \"D\", \"D\"…"},{"path":"https://stemxresearch.github.io/dta/reference/dta_rename.html","id":null,"dir":"Reference","previous_headings":"","what":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","title":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","text":"dta_rename() renames columns data frame dat using dictionary dict. dictionary specifies old column names corresponding new names.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_rename.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","text":"","code":"dta_rename(dat, dict = NULL, .oldnames, .newnames)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_rename.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","text":"dat data frame whose columns renamed. dict data frame serving dictionary, containing old new variable names. .oldnames column dict specifying old variable names. .newnames column dict specifying new variable names.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_rename.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","text":"tibble renamed columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_rename.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","text":"function checks following: dat dict data frames tibbles. Columns specified .oldnames exist dict. new variable names .newnames unique. overlap .oldnames .newnames avoid conflicts. issues detected, error warning raised ensure proper processing.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_rename.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rename columns in a data frame and tibble based on a dictionary — dta_rename","text":"","code":"data(\"data_bmi\") dta_gtable(data_bmi)     id       age       height       weight     STM/4921 50 1.64 59STM/4396 34 1.98 57STM/7908 50 1.95 84STM/7243 39 1.52 63STM/4801 52 1.69 65STM/5134 50 1.71 73STM/7138 35 1.73 46STM/6802 72 1.98 70STM/4420 42 1.62 103STM/6351 40 1.89 96STM/4933 38 1.91 67STM/4303 37 1.56 75STM/7465 45 1.62 44STM/4587 67 1.38 51STM/5320 44 1.37 63 # Rename the columns `age` and `weight` to `age_in_years` # and `weight_in_kgs`  result <- dta_rename(   dat = data_bmi,   .oldnames = c(\"age\", \"weight\"),   .newnames = c(\"age_in_years\", \"weight_in_kgs\") )  dta_gtable(result)     id       age_in_years       height       weight_in_kgs     STM/4921 50 1.64 59STM/4396 34 1.98 57STM/7908 50 1.95 84STM/7243 39 1.52 63STM/4801 52 1.69 65STM/5134 50 1.71 73STM/7138 35 1.73 46STM/6802 72 1.98 70STM/4420 42 1.62 103STM/6351 40 1.89 96STM/4933 38 1.91 67STM/4303 37 1.56 75STM/7465 45 1.62 44STM/4587 67 1.38 51STM/5320 44 1.37 63 # Rename all columns to `unique_id`, `age_in_years`, # `height_in_meters` and `weight_in_kgs`. In this case,  new_names <- c(   \"unique_id\",   \"age_in_years\",   \"height_in_meters\",   \"weight_in_kgs\" ) result2 <- dta_rename(   dat = data_bmi,   .oldnames = NA,   .newnames = new_names )  dta_gtable(result2)     unique_id       age_in_years       height_in_meters       weight_in_kgs     STM/4921 50 1.64 59STM/4396 34 1.98 57STM/7908 50 1.95 84STM/7243 39 1.52 63STM/4801 52 1.69 65STM/5134 50 1.71 73STM/7138 35 1.73 46STM/6802 72 1.98 70STM/4420 42 1.62 103STM/6351 40 1.89 96STM/4933 38 1.91 67STM/4303 37 1.56 75STM/7465 45 1.62 44STM/4587 67 1.38 51STM/5320 44 1.37 63 # Rename from a dictionary - Begin by loading the dataset # with columns to be renamed.  data(\"data_rename\") dta_gtable(head(data_rename))     uniqueidentifier       where_from       age       height       weight       group       maritalstatus       highesteducationlevel       employed       socioeconomicstatus     STM/4921 North East 50 1.64 59 AB Married Bachelors Yes HighSTM/4396 Central 34 1.98 57 A Married Masters Yes LowSTM/7908 West 50 1.95 84 A Married Bachelors Yes LowSTM/7243 Central 39 1.52 63 O Single Masters Yes HighSTM/4801 Central 52 1.69 65 AB Single Doctorate No LowSTM/5134 West 50 1.71 73 AB Married Doctorate No Middle # The dictionary with the columns `oldnames` and # `newnames` representing the old and new variable names # respectively  data(\"dict_rename\") dta_gtable(dict_rename)     old       new     uniqueidentifier idwhere_from regionage age_yearsheight height_metersweight weight_kggroup age_groupmaritalstatus marital_statushighesteducationlevel education_levelemployed employment_statussocioeconomicstatus ses # Perform the renaming  result3 <- dta_rename(   dat = data_rename,   dict = dict_rename,   .oldnames = old,   .newnames = new )  dta_gtable(result3)     id       region       age_years       height_meters       weight_kg       age_group       marital_status       education_level       employment_status       ses     STM/4921 North East 50 1.64 59 AB Married Bachelors Yes HighSTM/4396 Central 34 1.98 57 A Married Masters Yes LowSTM/7908 West 50 1.95 84 A Married Bachelors Yes LowSTM/7243 Central 39 1.52 63 O Single Masters Yes HighSTM/4801 Central 52 1.69 65 AB Single Doctorate No LowSTM/5134 West 50 1.71 73 AB Married Doctorate No MiddleSTM/7138 West 35 1.73 46 A Single Bachelors No HighSTM/6802 West 72 1.98 70 B Single Doctorate No LowSTM/4420 West 42 1.62 103 AB Single Masters No MiddleSTM/6351 North East 40 1.89 96 A Other Doctorate Yes HighSTM/4933 West 38 1.91 67 B Married Bachelors Yes HighSTM/4303 West 37 1.56 75 A Single Bachelors No LowSTM/7465 South 45 1.62 44 AB Married Bachelors Yes LowSTM/4587 Central 67 1.38 51 O Married Bachelors No LowSTM/5320 South 44 1.37 63 AB Married Bachelors No Middle"},{"path":"https://stemxresearch.github.io/dta/reference/dta_replace.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct misspelled data using a dictionary — dta_replace","title":"Correct misspelled data using a dictionary — dta_replace","text":"dta_replace() corrects misspelled entries data frame tibble based provided dictionary. dictionary specifies correct values misspelled entries specified column.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_replace.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct misspelled data using a dictionary — dta_replace","text":"","code":"dta_replace(dat, dict, .name, .wrong, .correct)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_replace.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct misspelled data using a dictionary — dta_replace","text":"dat data frame tibble containing data corrected. dict data frame tibble serving dictionary, columns specifying correct incorrect spellings. .name column dat dict match entries (e.g., unique identifier). .wrong column dict containing misspelled values corrected. .correct column dict containing correct values misspelled entries.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_replace.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct misspelled data using a dictionary — dta_replace","text":"data frame tibble corrected entries.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_replace.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Correct misspelled data using a dictionary — dta_replace","text":"function first validates dat dict data frames tibbles. fills missing values dict columns specified .name .correct, using downward fill strategy. Finally, replaces misspelled values dat using dictionary lookup facilitated matchmaker::match_df().","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_replace.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correct misspelled data using a dictionary — dta_replace","text":"","code":"# Example data with misspelled characters / strings  data(\"data_misspelled\") dta_gtable(head(data_misspelled))     id       region       age       height       weight       blood_group       marital_status       education       ses       r       python       sas       stata       spss       excel     STM/7539 southern 46 1.85 77 ba Other BSC medium n n yes tru n nSTM/7993 South 45 1.64 53 AB maried Bsc Midle y N n no tru NSTM/7387 southern 37 1.61 75 B single BSC Middle N tru no Yes No nSTM/5598 West 45 1.80 69 B Single MSc low y N y fasle no YesSTM/5901 South 51 1.81 53 A+ Others Bachelors Medium no yes Yes n tru YesSTM/7529 North-East 56 1.35 56 O Single Bsc Mediam yes fasle no yes tru no data(\"dict_misspelled\") dta_gtable(dict_misspelled)     variable       old       new     region southern South wset West North-East North Eastblood_group ba AB ab  o O A+ A a marital_status maried Married single Single Singel  Others Othereducation BSC Bachelors Bsc  Bachelers  MSc Masters PhD Doctorate Doctoral ses medium Middle Midle  Mediam  low Low Hihg High.global fasle No N  n  no  yes Yes y  tru  # Correct the misspelled entries in `dat` using the # `dict` dictionary  result <- dta_replace(   dat = data_misspelled,    dict = dict_misspelled,    .name = variable,    .wrong = old,    .correct = new ) dta_gtable(head(result))     id       region       age       height       weight       blood_group       marital_status       education       ses       r       python       sas       stata       spss       excel     STM/7539 South 46 1.85 77 AB Other Bachelors Middle No No Yes Yes No NoSTM/7993 South 45 1.64 53 AB Married Bachelors Middle Yes No No No Yes NoSTM/7387 South 37 1.61 75 B Single Bachelors Middle No Yes No Yes No NoSTM/5598 West 45 1.80 69 B Single Masters Low Yes No Yes No No YesSTM/5901 South 51 1.81 53 A Other Bachelors Medium No Yes Yes No Yes YesSTM/7529 North East 56 1.35 56 O Single Bachelors Middle Yes No No Yes Yes No"},{"path":"https://stemxresearch.github.io/dta/reference/dta_to_numeric.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","title":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","text":"dta_to_numeric() takes data frame converts columns containing numeric values represented strings numeric columns. columns remain unchanged.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_to_numeric.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","text":"","code":"dta_to_numeric(dat)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_to_numeric.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","text":"dat data frame numeric strings character columns converted numeric.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_to_numeric.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","text":"data frame numeric strings converted numeric columns.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_to_numeric.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","text":"function scans column input data frame. character columns, checks values can safely coerced numeric. , column converted numeric using .numeric(). Non-character columns character columns containing non-numeric values remain unchanged. Columns processed using lapply(), ensures efficient handling column.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_to_numeric.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numeric strings in a data frame or tibble to numeric numbers — dta_to_numeric","text":"","code":"# A data frame with numeric character (a), characters (b) and numeric numbers (c)  df <- data.frame(   a = c(\"1\", \"2\", \"3\"),   b = c(\"A\", \"B\", \"C\"),   c = c(4, 5, 6) ) dta_gtable(df)     a       b       c     1 A 42 B 53 C 6str(df) #> 'data.frame':\t3 obs. of  3 variables: #>  $ a: chr  \"1\" \"2\" \"3\" #>  $ b: chr  \"A\" \"B\" \"C\" #>  $ c: num  4 5 6  # Convert numeric strings to numeric columns  df <- dta_to_numeric(df) dta_gtable(df)     a       b       c     1 A 42 B 53 C 6str(df) #> tibble [3 × 3] (S3: tbl_df/tbl/data.frame) #>  $ a: num [1:3] 1 2 3 #>  $ b: chr [1:3] \"A\" \"B\" \"C\" #>  $ c: num [1:3] 4 5 6"},{"path":"https://stemxresearch.github.io/dta/reference/dta_transpose.html","id":null,"dir":"Reference","previous_headings":"","what":"Transpose a data frame with specified column as variable names — dta_transpose","title":"Transpose a data frame with specified column as variable names — dta_transpose","text":"dta_transpose() transposes data frame, optionally using specified column names resulting variables. function can also convert numeric strings numeric values transposed data frame.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_transpose.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transpose a data frame with specified column as variable names — dta_transpose","text":"","code":"dta_transpose(dat, .column_to_use_as_variables = NULL)"},{"path":"https://stemxresearch.github.io/dta/reference/dta_transpose.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transpose a data frame with specified column as variable names — dta_transpose","text":"dat data frame tibble transpose. .column_to_use_as_variables column name use variable names transposed data frame. left empty, default column names \"V1\", \"V2\", ... begenerated.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_transpose.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transpose a data frame with specified column as variable names — dta_transpose","text":"transposed data frame specified generated column names.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_transpose.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transpose a data frame with specified column as variable names — dta_transpose","text":"function first checks input valid data frame tibble. column specified via .column_to_use_as_variables, values used column names transposed data frame, column removed input transposing. column specified, default column names generated format \"V1\", \"V2\", .... transposition, dta_to_numeric() function applied ensure numeric strings transposed data frame converted numeric values.","code":""},{"path":"https://stemxresearch.github.io/dta/reference/dta_transpose.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transpose a data frame with specified column as variable names — dta_transpose","text":"","code":"data(\"data_cancer\") dta_gtable(data_cancer)     cancer_type       V1       V2       V3       V4       V5       V6       V7       V8       V9       V10       V11       V12       V13       V14       V15       V16       V17     stomach 124 42 25 45 412 51 1112 46 103 876 146 340 396    bronchus 81 461 20 450 246 166 63 64 155 859 151 166 37 223 138 72 245colon 248 372 189 1843 180 537 519 455 406 365 942 776 372 163 101 20 283ovary 1234 89 201 356 2970 456            # Transpose the data frame and use column 1 as variable # names in the transposed data frame.  df <- dta_transpose(   dat = data_cancer, .column_to_use_as_variables = 1 ) dta_gtable(df)     stomach       bronchus       colon       ovary     124 81 248 123442 461 372 8925 20 189 20145 450 1843 356412 246 180 297051 166 537 4561112 63 519 46 64 455 103 155 406 876 859 365 146 151 942 340 166 776 396 37 372  223 163  138 101  72 20  245 283  # You could also specify the variable name  df2 <- dta_transpose(   dat = data_cancer,   .column_to_use_as_variables = cancer_type ) dta_gtable(df2)     stomach       bronchus       colon       ovary     124 81 248 123442 461 372 8925 20 189 20145 450 1843 356412 246 180 297051 166 537 4561112 63 519 46 64 455 103 155 406 876 859 365 146 151 942 340 166 776 396 37 372  223 163  138 101  72 20  245 283  # Use default column names  data(\"data_cancer2\") # does not have cancer types column dta_gtable(data_cancer2)     V1       V2       V3       V4       V5       V6       V7       V8       V9       V10       V11       V12       V13       V14       V15       V16       V17     124 42 25 45 412 51 1112 46 103 876 146 340 396    81 461 20 450 246 166 63 64 155 859 151 166 37 223 138 72 245248 372 189 1843 180 537 519 455 406 365 942 776 372 163 101 20 2831234 89 201 356 2970 456            # Transpose and use default column names \"V1\", \"V2\", ...  df3 <- dta_transpose(data_cancer2) dta_gtable(df3)     V1       V2       V3       V4     124 81 248 123442 461 372 8925 20 189 20145 450 1843 356412 246 180 297051 166 537 4561112 63 519 46 64 455 103 155 406 876 859 365 146 151 942 340 166 776 396 37 372  223 163  138 101  72 20  245 283"},{"path":"https://stemxresearch.github.io/dta/news/index.html","id":"dta-010","dir":"Changelog","previous_headings":"","what":"dta 0.1.0","title":"dta 0.1.0","text":"Original first release.","code":""}]
